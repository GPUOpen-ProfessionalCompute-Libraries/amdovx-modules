// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/graph_transfer_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/framework/graph_transfer_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
class GraphTransferInfo_NodeInputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GraphTransferInfo_NodeInput> {
} _GraphTransferInfo_NodeInput_default_instance_;
class GraphTransferInfo_NodeInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GraphTransferInfo_NodeInfo> {
} _GraphTransferInfo_NodeInfo_default_instance_;
class GraphTransferInfo_ConstNodeInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GraphTransferInfo_ConstNodeInfo> {
} _GraphTransferInfo_ConstNodeInfo_default_instance_;
class GraphTransferInfo_NodeInputInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GraphTransferInfo_NodeInputInfo> {
} _GraphTransferInfo_NodeInputInfo_default_instance_;
class GraphTransferInfo_NodeOutputInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GraphTransferInfo_NodeOutputInfo> {
} _GraphTransferInfo_NodeOutputInfo_default_instance_;
class GraphTransferInfo_GraphInputNodeInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GraphTransferInfo_GraphInputNodeInfo> {
} _GraphTransferInfo_GraphInputNodeInfo_default_instance_;
class GraphTransferInfo_GraphOutputNodeInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GraphTransferInfo_GraphOutputNodeInfo> {
} _GraphTransferInfo_GraphOutputNodeInfo_default_instance_;
class GraphTransferInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GraphTransferInfo> {
} _GraphTransferInfo_default_instance_;

namespace protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_NodeInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_NodeInput, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_NodeInput, output_port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_NodeInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_NodeInfo, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_NodeInfo, type_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_NodeInfo, soc_op_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_NodeInfo, padding_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_NodeInfo, input_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_NodeInfo, output_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_ConstNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_ConstNodeInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_ConstNodeInfo, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_ConstNodeInfo, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_ConstNodeInfo, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_ConstNodeInfo, dtype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_NodeInputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_NodeInputInfo, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_NodeInputInfo, node_input_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_NodeOutputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_NodeOutputInfo, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_NodeOutputInfo, max_byte_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_GraphInputNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_GraphInputNodeInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_GraphInputNodeInfo, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_GraphInputNodeInfo, dtype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_GraphOutputNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_GraphOutputNodeInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_GraphOutputNodeInfo, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo_GraphOutputNodeInfo, dtype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo, node_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo, const_node_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo, node_input_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo, node_output_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo, graph_input_node_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo, graph_output_node_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo, destination_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(GraphTransferInfo_NodeInput)},
  { 6, -1, sizeof(GraphTransferInfo_NodeInfo)},
  { 17, -1, sizeof(GraphTransferInfo_ConstNodeInfo)},
  { 26, -1, sizeof(GraphTransferInfo_NodeInputInfo)},
  { 32, -1, sizeof(GraphTransferInfo_NodeOutputInfo)},
  { 38, -1, sizeof(GraphTransferInfo_GraphInputNodeInfo)},
  { 45, -1, sizeof(GraphTransferInfo_GraphOutputNodeInfo)},
  { 52, -1, sizeof(GraphTransferInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GraphTransferInfo_NodeInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GraphTransferInfo_NodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GraphTransferInfo_ConstNodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GraphTransferInfo_NodeInputInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GraphTransferInfo_NodeOutputInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GraphTransferInfo_GraphInputNodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GraphTransferInfo_GraphOutputNodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GraphTransferInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/core/framework/graph_transfer_info.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

GOOGLE_ATTRIBUTE_NOINLINE void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _GraphTransferInfo_NodeInput_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _GraphTransferInfo_NodeInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _GraphTransferInfo_ConstNodeInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _GraphTransferInfo_NodeInputInfo_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _GraphTransferInfo_NodeOutputInfo_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _GraphTransferInfo_GraphInputNodeInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _GraphTransferInfo_GraphOutputNodeInfo_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _GraphTransferInfo_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftypes_2eproto::InitDefaults();
  _GraphTransferInfo_NodeInput_default_instance_.DefaultConstruct();
  _GraphTransferInfo_NodeInfo_default_instance_.DefaultConstruct();
  _GraphTransferInfo_ConstNodeInfo_default_instance_.DefaultConstruct();
  _GraphTransferInfo_NodeInputInfo_default_instance_.DefaultConstruct();
  _GraphTransferInfo_NodeOutputInfo_default_instance_.DefaultConstruct();
  _GraphTransferInfo_GraphInputNodeInfo_default_instance_.DefaultConstruct();
  _GraphTransferInfo_GraphOutputNodeInfo_default_instance_.DefaultConstruct();
  _GraphTransferInfo_default_instance_.DefaultConstruct();
}

GOOGLE_ATTRIBUTE_NOINLINE void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n3tensorflow/core/framework/graph_transf"
      "er_info.proto\022\ntensorflow\032%tensorflow/co"
      "re/framework/types.proto\"\253\t\n\021GraphTransf"
      "erInfo\0229\n\tnode_info\030\001 \003(\0132&.tensorflow.G"
      "raphTransferInfo.NodeInfo\022D\n\017const_node_"
      "info\030\002 \003(\0132+.tensorflow.GraphTransferInf"
      "o.ConstNodeInfo\022D\n\017node_input_info\030\003 \003(\013"
      "2+.tensorflow.GraphTransferInfo.NodeInpu"
      "tInfo\022F\n\020node_output_info\030\004 \003(\0132,.tensor"
      "flow.GraphTransferInfo.NodeOutputInfo\022O\n"
      "\025graph_input_node_info\030\005 \003(\01320.tensorflo"
      "w.GraphTransferInfo.GraphInputNodeInfo\022Q"
      "\n\026graph_output_node_info\030\006 \003(\01321.tensorf"
      "low.GraphTransferInfo.GraphOutputNodeInf"
      "o\022>\n\013destination\030\007 \001(\0162).tensorflow.Grap"
      "hTransferInfo.Destination\0321\n\tNodeInput\022\017"
      "\n\007node_id\030\001 \001(\005\022\023\n\013output_port\030\002 \001(\005\032\216\001\n"
      "\010NodeInfo\022\014\n\004name\030\001 \001(\t\022\017\n\007node_id\030\002 \001(\005"
      "\022\021\n\ttype_name\030\003 \001(\t\022\021\n\tsoc_op_id\030\004 \001(\005\022\022"
      "\n\npadding_id\030\005 \001(\005\022\023\n\013input_count\030\006 \001(\005\022"
      "\024\n\014output_count\030\007 \001(\005\032p\n\rConstNodeInfo\022\014"
      "\n\004name\030\001 \001(\t\022\017\n\007node_id\030\002 \001(\005\022\r\n\005shape\030\003"
      " \003(\003\022\014\n\004data\030\004 \001(\014\022#\n\005dtype\030\005 \001(\0162\024.tens"
      "orflow.DataType\032]\n\rNodeInputInfo\022\017\n\007node"
      "_id\030\001 \001(\005\022;\n\nnode_input\030\002 \003(\0132\'.tensorfl"
      "ow.GraphTransferInfo.NodeInput\0328\n\016NodeOu"
      "tputInfo\022\017\n\007node_id\030\001 \001(\005\022\025\n\rmax_byte_si"
      "ze\030\002 \003(\005\032V\n\022GraphInputNodeInfo\022\014\n\004name\030\001"
      " \001(\t\022\r\n\005shape\030\002 \003(\003\022#\n\005dtype\030\003 \001(\0162\024.ten"
      "sorflow.DataType\032W\n\023GraphOutputNodeInfo\022"
      "\014\n\004name\030\001 \001(\t\022\r\n\005shape\030\002 \003(\003\022#\n\005dtype\030\003 "
      "\001(\0162\024.tensorflow.DataType\"#\n\013Destination"
      "\022\007\n\003NOP\020\000\022\013\n\007HEXAGON\020\001B7\n\030org.tensorflow"
      ".frameworkB\026GraphTransferInfoProtoP\001\370\001\001b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1367);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/framework/graph_transfer_info.proto", &protobuf_RegisterTypes);
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftypes_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

GOOGLE_ATTRIBUTE_NOINLINE void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto

const ::google::protobuf::EnumDescriptor* GraphTransferInfo_Destination_descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::file_level_enum_descriptors[0];
}
bool GraphTransferInfo_Destination_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GraphTransferInfo_Destination GraphTransferInfo::NOP;
const GraphTransferInfo_Destination GraphTransferInfo::HEXAGON;
const GraphTransferInfo_Destination GraphTransferInfo::Destination_MIN;
const GraphTransferInfo_Destination GraphTransferInfo::Destination_MAX;
const int GraphTransferInfo::Destination_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferInfo_NodeInput::kNodeIdFieldNumber;
const int GraphTransferInfo_NodeInput::kOutputPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferInfo_NodeInput::GraphTransferInfo_NodeInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferInfo.NodeInput)
}
GraphTransferInfo_NodeInput::GraphTransferInfo_NodeInput(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferInfo.NodeInput)
}
GraphTransferInfo_NodeInput::GraphTransferInfo_NodeInput(const GraphTransferInfo_NodeInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&node_id_, &from.node_id_,
    reinterpret_cast<char*>(&output_port_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(output_port_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferInfo.NodeInput)
}

void GraphTransferInfo_NodeInput::SharedCtor() {
  ::memset(&node_id_, 0, reinterpret_cast<char*>(&output_port_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(output_port_));
  _cached_size_ = 0;
}

GraphTransferInfo_NodeInput::~GraphTransferInfo_NodeInput() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferInfo.NodeInput)
  SharedDtor();
}

void GraphTransferInfo_NodeInput::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void GraphTransferInfo_NodeInput::ArenaDtor(void* object) {
  GraphTransferInfo_NodeInput* _this = reinterpret_cast< GraphTransferInfo_NodeInput* >(object);
  (void)_this;
}
void GraphTransferInfo_NodeInput::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphTransferInfo_NodeInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphTransferInfo_NodeInput::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::file_level_metadata[0].descriptor;
}

const GraphTransferInfo_NodeInput& GraphTransferInfo_NodeInput::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

GraphTransferInfo_NodeInput* GraphTransferInfo_NodeInput::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphTransferInfo_NodeInput>(arena);
}

void GraphTransferInfo_NodeInput::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferInfo.NodeInput)
  ::memset(&node_id_, 0, reinterpret_cast<char*>(&output_port_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(output_port_));
}

bool GraphTransferInfo_NodeInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferInfo.NodeInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 output_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferInfo.NodeInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferInfo.NodeInput)
  return false;
#undef DO_
}

void GraphTransferInfo_NodeInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferInfo.NodeInput)
  // int32 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // int32 output_port = 2;
  if (this->output_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->output_port(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferInfo.NodeInput)
}

::google::protobuf::uint8* GraphTransferInfo_NodeInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferInfo.NodeInput)
  // int32 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // int32 output_port = 2;
  if (this->output_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->output_port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferInfo.NodeInput)
  return target;
}

size_t GraphTransferInfo_NodeInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferInfo.NodeInput)
  size_t total_size = 0;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  // int32 output_port = 2;
  if (this->output_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->output_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphTransferInfo_NodeInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferInfo.NodeInput)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphTransferInfo_NodeInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphTransferInfo_NodeInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferInfo.NodeInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferInfo.NodeInput)
    MergeFrom(*source);
  }
}

void GraphTransferInfo_NodeInput::MergeFrom(const GraphTransferInfo_NodeInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferInfo.NodeInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.output_port() != 0) {
    set_output_port(from.output_port());
  }
}

void GraphTransferInfo_NodeInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferInfo.NodeInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferInfo_NodeInput::CopyFrom(const GraphTransferInfo_NodeInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferInfo.NodeInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferInfo_NodeInput::IsInitialized() const {
  return true;
}

void GraphTransferInfo_NodeInput::Swap(GraphTransferInfo_NodeInput* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferInfo_NodeInput* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GraphTransferInfo_NodeInput::UnsafeArenaSwap(GraphTransferInfo_NodeInput* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferInfo_NodeInput::InternalSwap(GraphTransferInfo_NodeInput* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(output_port_, other->output_port_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphTransferInfo_NodeInput::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphTransferInfo_NodeInput

// int32 node_id = 1;
void GraphTransferInfo_NodeInput::clear_node_id() {
  node_id_ = 0;
}
::google::protobuf::int32 GraphTransferInfo_NodeInput::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInput.node_id)
  return node_id_;
}
void GraphTransferInfo_NodeInput::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInput.node_id)
}

// int32 output_port = 2;
void GraphTransferInfo_NodeInput::clear_output_port() {
  output_port_ = 0;
}
::google::protobuf::int32 GraphTransferInfo_NodeInput::output_port() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInput.output_port)
  return output_port_;
}
void GraphTransferInfo_NodeInput::set_output_port(::google::protobuf::int32 value) {
  
  output_port_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInput.output_port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferInfo_NodeInfo::kNameFieldNumber;
const int GraphTransferInfo_NodeInfo::kNodeIdFieldNumber;
const int GraphTransferInfo_NodeInfo::kTypeNameFieldNumber;
const int GraphTransferInfo_NodeInfo::kSocOpIdFieldNumber;
const int GraphTransferInfo_NodeInfo::kPaddingIdFieldNumber;
const int GraphTransferInfo_NodeInfo::kInputCountFieldNumber;
const int GraphTransferInfo_NodeInfo::kOutputCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferInfo_NodeInfo::GraphTransferInfo_NodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferInfo.NodeInfo)
}
GraphTransferInfo_NodeInfo::GraphTransferInfo_NodeInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferInfo.NodeInfo)
}
GraphTransferInfo_NodeInfo::GraphTransferInfo_NodeInfo(const GraphTransferInfo_NodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  type_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type_name().size() > 0) {
    type_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&node_id_, &from.node_id_,
    reinterpret_cast<char*>(&output_count_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(output_count_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferInfo.NodeInfo)
}

void GraphTransferInfo_NodeInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, reinterpret_cast<char*>(&output_count_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(output_count_));
  _cached_size_ = 0;
}

GraphTransferInfo_NodeInfo::~GraphTransferInfo_NodeInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferInfo.NodeInfo)
  SharedDtor();
}

void GraphTransferInfo_NodeInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  type_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GraphTransferInfo_NodeInfo::ArenaDtor(void* object) {
  GraphTransferInfo_NodeInfo* _this = reinterpret_cast< GraphTransferInfo_NodeInfo* >(object);
  (void)_this;
}
void GraphTransferInfo_NodeInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphTransferInfo_NodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphTransferInfo_NodeInfo::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::file_level_metadata[1].descriptor;
}

const GraphTransferInfo_NodeInfo& GraphTransferInfo_NodeInfo::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

GraphTransferInfo_NodeInfo* GraphTransferInfo_NodeInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphTransferInfo_NodeInfo>(arena);
}

void GraphTransferInfo_NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferInfo.NodeInfo)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  type_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&node_id_, 0, reinterpret_cast<char*>(&output_count_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(output_count_));
}

bool GraphTransferInfo_NodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferInfo.NodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphTransferInfo.NodeInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type_name().data(), this->type_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphTransferInfo.NodeInfo.type_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 soc_op_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soc_op_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 padding_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &padding_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 input_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 output_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferInfo.NodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferInfo.NodeInfo)
  return false;
#undef DO_
}

void GraphTransferInfo_NodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferInfo.NodeInfo)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferInfo.NodeInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_id(), output);
  }

  // string type_name = 3;
  if (this->type_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferInfo.NodeInfo.type_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type_name(), output);
  }

  // int32 soc_op_id = 4;
  if (this->soc_op_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->soc_op_id(), output);
  }

  // int32 padding_id = 5;
  if (this->padding_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->padding_id(), output);
  }

  // int32 input_count = 6;
  if (this->input_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->input_count(), output);
  }

  // int32 output_count = 7;
  if (this->output_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->output_count(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferInfo.NodeInfo)
}

::google::protobuf::uint8* GraphTransferInfo_NodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferInfo.NodeInfo)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferInfo.NodeInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node_id(), target);
  }

  // string type_name = 3;
  if (this->type_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferInfo.NodeInfo.type_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type_name(), target);
  }

  // int32 soc_op_id = 4;
  if (this->soc_op_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->soc_op_id(), target);
  }

  // int32 padding_id = 5;
  if (this->padding_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->padding_id(), target);
  }

  // int32 input_count = 6;
  if (this->input_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->input_count(), target);
  }

  // int32 output_count = 7;
  if (this->output_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->output_count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferInfo.NodeInfo)
  return target;
}

size_t GraphTransferInfo_NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferInfo.NodeInfo)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string type_name = 3;
  if (this->type_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type_name());
  }

  // int32 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  // int32 soc_op_id = 4;
  if (this->soc_op_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->soc_op_id());
  }

  // int32 padding_id = 5;
  if (this->padding_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->padding_id());
  }

  // int32 input_count = 6;
  if (this->input_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->input_count());
  }

  // int32 output_count = 7;
  if (this->output_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->output_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphTransferInfo_NodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferInfo.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphTransferInfo_NodeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphTransferInfo_NodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferInfo.NodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferInfo.NodeInfo)
    MergeFrom(*source);
  }
}

void GraphTransferInfo_NodeInfo::MergeFrom(const GraphTransferInfo_NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferInfo.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.type_name().size() > 0) {
    set_type_name(from.type_name());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.soc_op_id() != 0) {
    set_soc_op_id(from.soc_op_id());
  }
  if (from.padding_id() != 0) {
    set_padding_id(from.padding_id());
  }
  if (from.input_count() != 0) {
    set_input_count(from.input_count());
  }
  if (from.output_count() != 0) {
    set_output_count(from.output_count());
  }
}

void GraphTransferInfo_NodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferInfo.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferInfo_NodeInfo::CopyFrom(const GraphTransferInfo_NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferInfo.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferInfo_NodeInfo::IsInitialized() const {
  return true;
}

void GraphTransferInfo_NodeInfo::Swap(GraphTransferInfo_NodeInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferInfo_NodeInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GraphTransferInfo_NodeInfo::UnsafeArenaSwap(GraphTransferInfo_NodeInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferInfo_NodeInfo::InternalSwap(GraphTransferInfo_NodeInfo* other) {
  name_.Swap(&other->name_);
  type_name_.Swap(&other->type_name_);
  std::swap(node_id_, other->node_id_);
  std::swap(soc_op_id_, other->soc_op_id_);
  std::swap(padding_id_, other->padding_id_);
  std::swap(input_count_, other->input_count_);
  std::swap(output_count_, other->output_count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphTransferInfo_NodeInfo::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphTransferInfo_NodeInfo

// string name = 1;
void GraphTransferInfo_NodeInfo::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GraphTransferInfo_NodeInfo::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInfo.name)
  return name_.Get();
}
void GraphTransferInfo_NodeInfo::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInfo.name)
}
void GraphTransferInfo_NodeInfo::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphTransferInfo.NodeInfo.name)
}
void GraphTransferInfo_NodeInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphTransferInfo.NodeInfo.name)
}
::std::string* GraphTransferInfo_NodeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.NodeInfo.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GraphTransferInfo_NodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphTransferInfo.NodeInfo.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GraphTransferInfo_NodeInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphTransferInfo.NodeInfo.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GraphTransferInfo_NodeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphTransferInfo.NodeInfo.name)
}
void GraphTransferInfo_NodeInfo::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphTransferInfo.NodeInfo.name)
}

// int32 node_id = 2;
void GraphTransferInfo_NodeInfo::clear_node_id() {
  node_id_ = 0;
}
::google::protobuf::int32 GraphTransferInfo_NodeInfo::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInfo.node_id)
  return node_id_;
}
void GraphTransferInfo_NodeInfo::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInfo.node_id)
}

// string type_name = 3;
void GraphTransferInfo_NodeInfo::clear_type_name() {
  type_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GraphTransferInfo_NodeInfo::type_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInfo.type_name)
  return type_name_.Get();
}
void GraphTransferInfo_NodeInfo::set_type_name(const ::std::string& value) {
  
  type_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInfo.type_name)
}
void GraphTransferInfo_NodeInfo::set_type_name(const char* value) {
  
  type_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphTransferInfo.NodeInfo.type_name)
}
void GraphTransferInfo_NodeInfo::set_type_name(const char* value,
    size_t size) {
  
  type_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphTransferInfo.NodeInfo.type_name)
}
::std::string* GraphTransferInfo_NodeInfo::mutable_type_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.NodeInfo.type_name)
  return type_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GraphTransferInfo_NodeInfo::release_type_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphTransferInfo.NodeInfo.type_name)
  
  return type_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GraphTransferInfo_NodeInfo::unsafe_arena_release_type_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphTransferInfo.NodeInfo.type_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return type_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GraphTransferInfo_NodeInfo::set_allocated_type_name(::std::string* type_name) {
  if (type_name != NULL) {
    
  } else {
    
  }
  type_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphTransferInfo.NodeInfo.type_name)
}
void GraphTransferInfo_NodeInfo::unsafe_arena_set_allocated_type_name(
    ::std::string* type_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (type_name != NULL) {
    
  } else {
    
  }
  type_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      type_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphTransferInfo.NodeInfo.type_name)
}

// int32 soc_op_id = 4;
void GraphTransferInfo_NodeInfo::clear_soc_op_id() {
  soc_op_id_ = 0;
}
::google::protobuf::int32 GraphTransferInfo_NodeInfo::soc_op_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInfo.soc_op_id)
  return soc_op_id_;
}
void GraphTransferInfo_NodeInfo::set_soc_op_id(::google::protobuf::int32 value) {
  
  soc_op_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInfo.soc_op_id)
}

// int32 padding_id = 5;
void GraphTransferInfo_NodeInfo::clear_padding_id() {
  padding_id_ = 0;
}
::google::protobuf::int32 GraphTransferInfo_NodeInfo::padding_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInfo.padding_id)
  return padding_id_;
}
void GraphTransferInfo_NodeInfo::set_padding_id(::google::protobuf::int32 value) {
  
  padding_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInfo.padding_id)
}

// int32 input_count = 6;
void GraphTransferInfo_NodeInfo::clear_input_count() {
  input_count_ = 0;
}
::google::protobuf::int32 GraphTransferInfo_NodeInfo::input_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInfo.input_count)
  return input_count_;
}
void GraphTransferInfo_NodeInfo::set_input_count(::google::protobuf::int32 value) {
  
  input_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInfo.input_count)
}

// int32 output_count = 7;
void GraphTransferInfo_NodeInfo::clear_output_count() {
  output_count_ = 0;
}
::google::protobuf::int32 GraphTransferInfo_NodeInfo::output_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInfo.output_count)
  return output_count_;
}
void GraphTransferInfo_NodeInfo::set_output_count(::google::protobuf::int32 value) {
  
  output_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInfo.output_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferInfo_ConstNodeInfo::kNameFieldNumber;
const int GraphTransferInfo_ConstNodeInfo::kNodeIdFieldNumber;
const int GraphTransferInfo_ConstNodeInfo::kShapeFieldNumber;
const int GraphTransferInfo_ConstNodeInfo::kDataFieldNumber;
const int GraphTransferInfo_ConstNodeInfo::kDtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferInfo_ConstNodeInfo::GraphTransferInfo_ConstNodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferInfo.ConstNodeInfo)
}
GraphTransferInfo_ConstNodeInfo::GraphTransferInfo_ConstNodeInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  shape_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferInfo.ConstNodeInfo)
}
GraphTransferInfo_ConstNodeInfo::GraphTransferInfo_ConstNodeInfo(const GraphTransferInfo_ConstNodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      shape_(from.shape_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data(),
      GetArenaNoVirtual());
  }
  ::memcpy(&node_id_, &from.node_id_,
    reinterpret_cast<char*>(&dtype_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(dtype_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferInfo.ConstNodeInfo)
}

void GraphTransferInfo_ConstNodeInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, reinterpret_cast<char*>(&dtype_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(dtype_));
  _cached_size_ = 0;
}

GraphTransferInfo_ConstNodeInfo::~GraphTransferInfo_ConstNodeInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferInfo.ConstNodeInfo)
  SharedDtor();
}

void GraphTransferInfo_ConstNodeInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GraphTransferInfo_ConstNodeInfo::ArenaDtor(void* object) {
  GraphTransferInfo_ConstNodeInfo* _this = reinterpret_cast< GraphTransferInfo_ConstNodeInfo* >(object);
  (void)_this;
}
void GraphTransferInfo_ConstNodeInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphTransferInfo_ConstNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphTransferInfo_ConstNodeInfo::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::file_level_metadata[2].descriptor;
}

const GraphTransferInfo_ConstNodeInfo& GraphTransferInfo_ConstNodeInfo::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

GraphTransferInfo_ConstNodeInfo* GraphTransferInfo_ConstNodeInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphTransferInfo_ConstNodeInfo>(arena);
}

void GraphTransferInfo_ConstNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferInfo.ConstNodeInfo)
  shape_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&node_id_, 0, reinterpret_cast<char*>(&dtype_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(dtype_));
}

bool GraphTransferInfo_ConstNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferInfo.ConstNodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphTransferInfo.ConstNodeInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 shape = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_shape())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DataType dtype = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferInfo.ConstNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferInfo.ConstNodeInfo)
  return false;
#undef DO_
}

void GraphTransferInfo_ConstNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferInfo.ConstNodeInfo)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferInfo.ConstNodeInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_id(), output);
  }

  // repeated int64 shape = 3;
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_);
  }
  for (int i = 0, n = this->shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->shape(i), output);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // .tensorflow.DataType dtype = 5;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->dtype(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferInfo.ConstNodeInfo)
}

::google::protobuf::uint8* GraphTransferInfo_ConstNodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferInfo.ConstNodeInfo)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferInfo.ConstNodeInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node_id(), target);
  }

  // repeated int64 shape = 3;
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _shape_cached_byte_size_, target);
  }
  for (int i = 0, n = this->shape_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->shape(i), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // .tensorflow.DataType dtype = 5;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->dtype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferInfo.ConstNodeInfo)
  return target;
}

size_t GraphTransferInfo_ConstNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferInfo.ConstNodeInfo)
  size_t total_size = 0;

  // repeated int64 shape = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shape_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int32 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  // .tensorflow.DataType dtype = 5;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphTransferInfo_ConstNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferInfo.ConstNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphTransferInfo_ConstNodeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphTransferInfo_ConstNodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferInfo.ConstNodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferInfo.ConstNodeInfo)
    MergeFrom(*source);
  }
}

void GraphTransferInfo_ConstNodeInfo::MergeFrom(const GraphTransferInfo_ConstNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferInfo.ConstNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shape_.MergeFrom(from.shape_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.data().size() > 0) {
    set_data(from.data());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void GraphTransferInfo_ConstNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferInfo.ConstNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferInfo_ConstNodeInfo::CopyFrom(const GraphTransferInfo_ConstNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferInfo.ConstNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferInfo_ConstNodeInfo::IsInitialized() const {
  return true;
}

void GraphTransferInfo_ConstNodeInfo::Swap(GraphTransferInfo_ConstNodeInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferInfo_ConstNodeInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GraphTransferInfo_ConstNodeInfo::UnsafeArenaSwap(GraphTransferInfo_ConstNodeInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferInfo_ConstNodeInfo::InternalSwap(GraphTransferInfo_ConstNodeInfo* other) {
  shape_.UnsafeArenaSwap(&other->shape_);
  name_.Swap(&other->name_);
  data_.Swap(&other->data_);
  std::swap(node_id_, other->node_id_);
  std::swap(dtype_, other->dtype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphTransferInfo_ConstNodeInfo::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphTransferInfo_ConstNodeInfo

// string name = 1;
void GraphTransferInfo_ConstNodeInfo::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GraphTransferInfo_ConstNodeInfo::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
  return name_.Get();
}
void GraphTransferInfo_ConstNodeInfo::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
}
void GraphTransferInfo_ConstNodeInfo::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
}
void GraphTransferInfo_ConstNodeInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
}
::std::string* GraphTransferInfo_ConstNodeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GraphTransferInfo_ConstNodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GraphTransferInfo_ConstNodeInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GraphTransferInfo_ConstNodeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
}
void GraphTransferInfo_ConstNodeInfo::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
}

// int32 node_id = 2;
void GraphTransferInfo_ConstNodeInfo::clear_node_id() {
  node_id_ = 0;
}
::google::protobuf::int32 GraphTransferInfo_ConstNodeInfo::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.ConstNodeInfo.node_id)
  return node_id_;
}
void GraphTransferInfo_ConstNodeInfo::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.ConstNodeInfo.node_id)
}

// repeated int64 shape = 3;
int GraphTransferInfo_ConstNodeInfo::shape_size() const {
  return shape_.size();
}
void GraphTransferInfo_ConstNodeInfo::clear_shape() {
  shape_.Clear();
}
::google::protobuf::int64 GraphTransferInfo_ConstNodeInfo::shape(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.ConstNodeInfo.shape)
  return shape_.Get(index);
}
void GraphTransferInfo_ConstNodeInfo::set_shape(int index, ::google::protobuf::int64 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.ConstNodeInfo.shape)
}
void GraphTransferInfo_ConstNodeInfo::add_shape(::google::protobuf::int64 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.ConstNodeInfo.shape)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GraphTransferInfo_ConstNodeInfo::shape() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.ConstNodeInfo.shape)
  return shape_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GraphTransferInfo_ConstNodeInfo::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.ConstNodeInfo.shape)
  return &shape_;
}

// bytes data = 4;
void GraphTransferInfo_ConstNodeInfo::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GraphTransferInfo_ConstNodeInfo::data() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
  return data_.Get();
}
void GraphTransferInfo_ConstNodeInfo::set_data(const ::std::string& value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
}
void GraphTransferInfo_ConstNodeInfo::set_data(const char* value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
}
void GraphTransferInfo_ConstNodeInfo::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
}
::std::string* GraphTransferInfo_ConstNodeInfo::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GraphTransferInfo_ConstNodeInfo::release_data() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
  
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GraphTransferInfo_ConstNodeInfo::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GraphTransferInfo_ConstNodeInfo::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
}
void GraphTransferInfo_ConstNodeInfo::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
}

// .tensorflow.DataType dtype = 5;
void GraphTransferInfo_ConstNodeInfo::clear_dtype() {
  dtype_ = 0;
}
::tensorflow::DataType GraphTransferInfo_ConstNodeInfo::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.ConstNodeInfo.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
void GraphTransferInfo_ConstNodeInfo::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.ConstNodeInfo.dtype)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferInfo_NodeInputInfo::kNodeIdFieldNumber;
const int GraphTransferInfo_NodeInputInfo::kNodeInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferInfo_NodeInputInfo::GraphTransferInfo_NodeInputInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferInfo.NodeInputInfo)
}
GraphTransferInfo_NodeInputInfo::GraphTransferInfo_NodeInputInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  node_input_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferInfo.NodeInputInfo)
}
GraphTransferInfo_NodeInputInfo::GraphTransferInfo_NodeInputInfo(const GraphTransferInfo_NodeInputInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      node_input_(from.node_input_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferInfo.NodeInputInfo)
}

void GraphTransferInfo_NodeInputInfo::SharedCtor() {
  node_id_ = 0;
  _cached_size_ = 0;
}

GraphTransferInfo_NodeInputInfo::~GraphTransferInfo_NodeInputInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferInfo.NodeInputInfo)
  SharedDtor();
}

void GraphTransferInfo_NodeInputInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void GraphTransferInfo_NodeInputInfo::ArenaDtor(void* object) {
  GraphTransferInfo_NodeInputInfo* _this = reinterpret_cast< GraphTransferInfo_NodeInputInfo* >(object);
  (void)_this;
}
void GraphTransferInfo_NodeInputInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphTransferInfo_NodeInputInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphTransferInfo_NodeInputInfo::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::file_level_metadata[3].descriptor;
}

const GraphTransferInfo_NodeInputInfo& GraphTransferInfo_NodeInputInfo::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

GraphTransferInfo_NodeInputInfo* GraphTransferInfo_NodeInputInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphTransferInfo_NodeInputInfo>(arena);
}

void GraphTransferInfo_NodeInputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferInfo.NodeInputInfo)
  node_input_.Clear();
  node_id_ = 0;
}

bool GraphTransferInfo_NodeInputInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferInfo.NodeInputInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.GraphTransferInfo.NodeInput node_input = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node_input()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferInfo.NodeInputInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferInfo.NodeInputInfo)
  return false;
#undef DO_
}

void GraphTransferInfo_NodeInputInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferInfo.NodeInputInfo)
  // int32 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // repeated .tensorflow.GraphTransferInfo.NodeInput node_input = 2;
  for (unsigned int i = 0, n = this->node_input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->node_input(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferInfo.NodeInputInfo)
}

::google::protobuf::uint8* GraphTransferInfo_NodeInputInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferInfo.NodeInputInfo)
  // int32 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // repeated .tensorflow.GraphTransferInfo.NodeInput node_input = 2;
  for (unsigned int i = 0, n = this->node_input_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->node_input(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferInfo.NodeInputInfo)
  return target;
}

size_t GraphTransferInfo_NodeInputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferInfo.NodeInputInfo)
  size_t total_size = 0;

  // repeated .tensorflow.GraphTransferInfo.NodeInput node_input = 2;
  {
    unsigned int count = this->node_input_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node_input(i));
    }
  }

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphTransferInfo_NodeInputInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferInfo.NodeInputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphTransferInfo_NodeInputInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphTransferInfo_NodeInputInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferInfo.NodeInputInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferInfo.NodeInputInfo)
    MergeFrom(*source);
  }
}

void GraphTransferInfo_NodeInputInfo::MergeFrom(const GraphTransferInfo_NodeInputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferInfo.NodeInputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_input_.MergeFrom(from.node_input_);
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void GraphTransferInfo_NodeInputInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferInfo.NodeInputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferInfo_NodeInputInfo::CopyFrom(const GraphTransferInfo_NodeInputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferInfo.NodeInputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferInfo_NodeInputInfo::IsInitialized() const {
  return true;
}

void GraphTransferInfo_NodeInputInfo::Swap(GraphTransferInfo_NodeInputInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferInfo_NodeInputInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GraphTransferInfo_NodeInputInfo::UnsafeArenaSwap(GraphTransferInfo_NodeInputInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferInfo_NodeInputInfo::InternalSwap(GraphTransferInfo_NodeInputInfo* other) {
  node_input_.UnsafeArenaSwap(&other->node_input_);
  std::swap(node_id_, other->node_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphTransferInfo_NodeInputInfo::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphTransferInfo_NodeInputInfo

// int32 node_id = 1;
void GraphTransferInfo_NodeInputInfo::clear_node_id() {
  node_id_ = 0;
}
::google::protobuf::int32 GraphTransferInfo_NodeInputInfo::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInputInfo.node_id)
  return node_id_;
}
void GraphTransferInfo_NodeInputInfo::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInputInfo.node_id)
}

// repeated .tensorflow.GraphTransferInfo.NodeInput node_input = 2;
int GraphTransferInfo_NodeInputInfo::node_input_size() const {
  return node_input_.size();
}
void GraphTransferInfo_NodeInputInfo::clear_node_input() {
  node_input_.Clear();
}
const ::tensorflow::GraphTransferInfo_NodeInput& GraphTransferInfo_NodeInputInfo::node_input(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInputInfo.node_input)
  return node_input_.Get(index);
}
::tensorflow::GraphTransferInfo_NodeInput* GraphTransferInfo_NodeInputInfo::mutable_node_input(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.NodeInputInfo.node_input)
  return node_input_.Mutable(index);
}
::tensorflow::GraphTransferInfo_NodeInput* GraphTransferInfo_NodeInputInfo::add_node_input() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.NodeInputInfo.node_input)
  return node_input_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInput >*
GraphTransferInfo_NodeInputInfo::mutable_node_input() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.NodeInputInfo.node_input)
  return &node_input_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInput >&
GraphTransferInfo_NodeInputInfo::node_input() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.NodeInputInfo.node_input)
  return node_input_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferInfo_NodeOutputInfo::kNodeIdFieldNumber;
const int GraphTransferInfo_NodeOutputInfo::kMaxByteSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferInfo_NodeOutputInfo::GraphTransferInfo_NodeOutputInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferInfo.NodeOutputInfo)
}
GraphTransferInfo_NodeOutputInfo::GraphTransferInfo_NodeOutputInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  max_byte_size_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferInfo.NodeOutputInfo)
}
GraphTransferInfo_NodeOutputInfo::GraphTransferInfo_NodeOutputInfo(const GraphTransferInfo_NodeOutputInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      max_byte_size_(from.max_byte_size_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferInfo.NodeOutputInfo)
}

void GraphTransferInfo_NodeOutputInfo::SharedCtor() {
  node_id_ = 0;
  _cached_size_ = 0;
}

GraphTransferInfo_NodeOutputInfo::~GraphTransferInfo_NodeOutputInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferInfo.NodeOutputInfo)
  SharedDtor();
}

void GraphTransferInfo_NodeOutputInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void GraphTransferInfo_NodeOutputInfo::ArenaDtor(void* object) {
  GraphTransferInfo_NodeOutputInfo* _this = reinterpret_cast< GraphTransferInfo_NodeOutputInfo* >(object);
  (void)_this;
}
void GraphTransferInfo_NodeOutputInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphTransferInfo_NodeOutputInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphTransferInfo_NodeOutputInfo::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::file_level_metadata[4].descriptor;
}

const GraphTransferInfo_NodeOutputInfo& GraphTransferInfo_NodeOutputInfo::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

GraphTransferInfo_NodeOutputInfo* GraphTransferInfo_NodeOutputInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphTransferInfo_NodeOutputInfo>(arena);
}

void GraphTransferInfo_NodeOutputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferInfo.NodeOutputInfo)
  max_byte_size_.Clear();
  node_id_ = 0;
}

bool GraphTransferInfo_NodeOutputInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferInfo.NodeOutputInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 max_byte_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_max_byte_size())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_max_byte_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferInfo.NodeOutputInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferInfo.NodeOutputInfo)
  return false;
#undef DO_
}

void GraphTransferInfo_NodeOutputInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferInfo.NodeOutputInfo)
  // int32 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // repeated int32 max_byte_size = 2;
  if (this->max_byte_size_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_max_byte_size_cached_byte_size_);
  }
  for (int i = 0, n = this->max_byte_size_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->max_byte_size(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferInfo.NodeOutputInfo)
}

::google::protobuf::uint8* GraphTransferInfo_NodeOutputInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferInfo.NodeOutputInfo)
  // int32 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // repeated int32 max_byte_size = 2;
  if (this->max_byte_size_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _max_byte_size_cached_byte_size_, target);
  }
  for (int i = 0, n = this->max_byte_size_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->max_byte_size(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferInfo.NodeOutputInfo)
  return target;
}

size_t GraphTransferInfo_NodeOutputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferInfo.NodeOutputInfo)
  size_t total_size = 0;

  // repeated int32 max_byte_size = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->max_byte_size_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _max_byte_size_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphTransferInfo_NodeOutputInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferInfo.NodeOutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphTransferInfo_NodeOutputInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphTransferInfo_NodeOutputInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferInfo.NodeOutputInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferInfo.NodeOutputInfo)
    MergeFrom(*source);
  }
}

void GraphTransferInfo_NodeOutputInfo::MergeFrom(const GraphTransferInfo_NodeOutputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferInfo.NodeOutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_byte_size_.MergeFrom(from.max_byte_size_);
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void GraphTransferInfo_NodeOutputInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferInfo.NodeOutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferInfo_NodeOutputInfo::CopyFrom(const GraphTransferInfo_NodeOutputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferInfo.NodeOutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferInfo_NodeOutputInfo::IsInitialized() const {
  return true;
}

void GraphTransferInfo_NodeOutputInfo::Swap(GraphTransferInfo_NodeOutputInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferInfo_NodeOutputInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GraphTransferInfo_NodeOutputInfo::UnsafeArenaSwap(GraphTransferInfo_NodeOutputInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferInfo_NodeOutputInfo::InternalSwap(GraphTransferInfo_NodeOutputInfo* other) {
  max_byte_size_.UnsafeArenaSwap(&other->max_byte_size_);
  std::swap(node_id_, other->node_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphTransferInfo_NodeOutputInfo::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphTransferInfo_NodeOutputInfo

// int32 node_id = 1;
void GraphTransferInfo_NodeOutputInfo::clear_node_id() {
  node_id_ = 0;
}
::google::protobuf::int32 GraphTransferInfo_NodeOutputInfo::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeOutputInfo.node_id)
  return node_id_;
}
void GraphTransferInfo_NodeOutputInfo::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeOutputInfo.node_id)
}

// repeated int32 max_byte_size = 2;
int GraphTransferInfo_NodeOutputInfo::max_byte_size_size() const {
  return max_byte_size_.size();
}
void GraphTransferInfo_NodeOutputInfo::clear_max_byte_size() {
  max_byte_size_.Clear();
}
::google::protobuf::int32 GraphTransferInfo_NodeOutputInfo::max_byte_size(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeOutputInfo.max_byte_size)
  return max_byte_size_.Get(index);
}
void GraphTransferInfo_NodeOutputInfo::set_max_byte_size(int index, ::google::protobuf::int32 value) {
  max_byte_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeOutputInfo.max_byte_size)
}
void GraphTransferInfo_NodeOutputInfo::add_max_byte_size(::google::protobuf::int32 value) {
  max_byte_size_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.NodeOutputInfo.max_byte_size)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GraphTransferInfo_NodeOutputInfo::max_byte_size() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.NodeOutputInfo.max_byte_size)
  return max_byte_size_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GraphTransferInfo_NodeOutputInfo::mutable_max_byte_size() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.NodeOutputInfo.max_byte_size)
  return &max_byte_size_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferInfo_GraphInputNodeInfo::kNameFieldNumber;
const int GraphTransferInfo_GraphInputNodeInfo::kShapeFieldNumber;
const int GraphTransferInfo_GraphInputNodeInfo::kDtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferInfo_GraphInputNodeInfo::GraphTransferInfo_GraphInputNodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
}
GraphTransferInfo_GraphInputNodeInfo::GraphTransferInfo_GraphInputNodeInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  shape_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
}
GraphTransferInfo_GraphInputNodeInfo::GraphTransferInfo_GraphInputNodeInfo(const GraphTransferInfo_GraphInputNodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      shape_(from.shape_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
}

void GraphTransferInfo_GraphInputNodeInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dtype_ = 0;
  _cached_size_ = 0;
}

GraphTransferInfo_GraphInputNodeInfo::~GraphTransferInfo_GraphInputNodeInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
  SharedDtor();
}

void GraphTransferInfo_GraphInputNodeInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GraphTransferInfo_GraphInputNodeInfo::ArenaDtor(void* object) {
  GraphTransferInfo_GraphInputNodeInfo* _this = reinterpret_cast< GraphTransferInfo_GraphInputNodeInfo* >(object);
  (void)_this;
}
void GraphTransferInfo_GraphInputNodeInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphTransferInfo_GraphInputNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphTransferInfo_GraphInputNodeInfo::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::file_level_metadata[5].descriptor;
}

const GraphTransferInfo_GraphInputNodeInfo& GraphTransferInfo_GraphInputNodeInfo::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

GraphTransferInfo_GraphInputNodeInfo* GraphTransferInfo_GraphInputNodeInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphTransferInfo_GraphInputNodeInfo>(arena);
}

void GraphTransferInfo_GraphInputNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
  shape_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  dtype_ = 0;
}

bool GraphTransferInfo_GraphInputNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphTransferInfo.GraphInputNodeInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 shape = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_shape())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DataType dtype = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
  return false;
#undef DO_
}

void GraphTransferInfo_GraphInputNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferInfo.GraphInputNodeInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated int64 shape = 2;
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_);
  }
  for (int i = 0, n = this->shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->shape(i), output);
  }

  // .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dtype(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
}

::google::protobuf::uint8* GraphTransferInfo_GraphInputNodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferInfo.GraphInputNodeInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated int64 shape = 2;
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _shape_cached_byte_size_, target);
  }
  for (int i = 0, n = this->shape_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->shape(i), target);
  }

  // .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dtype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
  return target;
}

size_t GraphTransferInfo_GraphInputNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
  size_t total_size = 0;

  // repeated int64 shape = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shape_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphTransferInfo_GraphInputNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphTransferInfo_GraphInputNodeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphTransferInfo_GraphInputNodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
    MergeFrom(*source);
  }
}

void GraphTransferInfo_GraphInputNodeInfo::MergeFrom(const GraphTransferInfo_GraphInputNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shape_.MergeFrom(from.shape_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void GraphTransferInfo_GraphInputNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferInfo_GraphInputNodeInfo::CopyFrom(const GraphTransferInfo_GraphInputNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferInfo_GraphInputNodeInfo::IsInitialized() const {
  return true;
}

void GraphTransferInfo_GraphInputNodeInfo::Swap(GraphTransferInfo_GraphInputNodeInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferInfo_GraphInputNodeInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GraphTransferInfo_GraphInputNodeInfo::UnsafeArenaSwap(GraphTransferInfo_GraphInputNodeInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferInfo_GraphInputNodeInfo::InternalSwap(GraphTransferInfo_GraphInputNodeInfo* other) {
  shape_.UnsafeArenaSwap(&other->shape_);
  name_.Swap(&other->name_);
  std::swap(dtype_, other->dtype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphTransferInfo_GraphInputNodeInfo::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphTransferInfo_GraphInputNodeInfo

// string name = 1;
void GraphTransferInfo_GraphInputNodeInfo::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GraphTransferInfo_GraphInputNodeInfo::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
  return name_.Get();
}
void GraphTransferInfo_GraphInputNodeInfo::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
}
void GraphTransferInfo_GraphInputNodeInfo::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
}
void GraphTransferInfo_GraphInputNodeInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
}
::std::string* GraphTransferInfo_GraphInputNodeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GraphTransferInfo_GraphInputNodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GraphTransferInfo_GraphInputNodeInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GraphTransferInfo_GraphInputNodeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
}
void GraphTransferInfo_GraphInputNodeInfo::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
}

// repeated int64 shape = 2;
int GraphTransferInfo_GraphInputNodeInfo::shape_size() const {
  return shape_.size();
}
void GraphTransferInfo_GraphInputNodeInfo::clear_shape() {
  shape_.Clear();
}
::google::protobuf::int64 GraphTransferInfo_GraphInputNodeInfo::shape(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.GraphInputNodeInfo.shape)
  return shape_.Get(index);
}
void GraphTransferInfo_GraphInputNodeInfo::set_shape(int index, ::google::protobuf::int64 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.GraphInputNodeInfo.shape)
}
void GraphTransferInfo_GraphInputNodeInfo::add_shape(::google::protobuf::int64 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.GraphInputNodeInfo.shape)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GraphTransferInfo_GraphInputNodeInfo::shape() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.GraphInputNodeInfo.shape)
  return shape_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GraphTransferInfo_GraphInputNodeInfo::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.GraphInputNodeInfo.shape)
  return &shape_;
}

// .tensorflow.DataType dtype = 3;
void GraphTransferInfo_GraphInputNodeInfo::clear_dtype() {
  dtype_ = 0;
}
::tensorflow::DataType GraphTransferInfo_GraphInputNodeInfo::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.GraphInputNodeInfo.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
void GraphTransferInfo_GraphInputNodeInfo::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.GraphInputNodeInfo.dtype)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferInfo_GraphOutputNodeInfo::kNameFieldNumber;
const int GraphTransferInfo_GraphOutputNodeInfo::kShapeFieldNumber;
const int GraphTransferInfo_GraphOutputNodeInfo::kDtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferInfo_GraphOutputNodeInfo::GraphTransferInfo_GraphOutputNodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
}
GraphTransferInfo_GraphOutputNodeInfo::GraphTransferInfo_GraphOutputNodeInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  shape_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
}
GraphTransferInfo_GraphOutputNodeInfo::GraphTransferInfo_GraphOutputNodeInfo(const GraphTransferInfo_GraphOutputNodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      shape_(from.shape_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
}

void GraphTransferInfo_GraphOutputNodeInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dtype_ = 0;
  _cached_size_ = 0;
}

GraphTransferInfo_GraphOutputNodeInfo::~GraphTransferInfo_GraphOutputNodeInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
  SharedDtor();
}

void GraphTransferInfo_GraphOutputNodeInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GraphTransferInfo_GraphOutputNodeInfo::ArenaDtor(void* object) {
  GraphTransferInfo_GraphOutputNodeInfo* _this = reinterpret_cast< GraphTransferInfo_GraphOutputNodeInfo* >(object);
  (void)_this;
}
void GraphTransferInfo_GraphOutputNodeInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphTransferInfo_GraphOutputNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphTransferInfo_GraphOutputNodeInfo::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::file_level_metadata[6].descriptor;
}

const GraphTransferInfo_GraphOutputNodeInfo& GraphTransferInfo_GraphOutputNodeInfo::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

GraphTransferInfo_GraphOutputNodeInfo* GraphTransferInfo_GraphOutputNodeInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphTransferInfo_GraphOutputNodeInfo>(arena);
}

void GraphTransferInfo_GraphOutputNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
  shape_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  dtype_ = 0;
}

bool GraphTransferInfo_GraphOutputNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 shape = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_shape())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DataType dtype = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
  return false;
#undef DO_
}

void GraphTransferInfo_GraphOutputNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated int64 shape = 2;
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_);
  }
  for (int i = 0, n = this->shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->shape(i), output);
  }

  // .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dtype(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
}

::google::protobuf::uint8* GraphTransferInfo_GraphOutputNodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated int64 shape = 2;
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _shape_cached_byte_size_, target);
  }
  for (int i = 0, n = this->shape_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->shape(i), target);
  }

  // .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dtype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
  return target;
}

size_t GraphTransferInfo_GraphOutputNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
  size_t total_size = 0;

  // repeated int64 shape = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shape_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphTransferInfo_GraphOutputNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphTransferInfo_GraphOutputNodeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphTransferInfo_GraphOutputNodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
    MergeFrom(*source);
  }
}

void GraphTransferInfo_GraphOutputNodeInfo::MergeFrom(const GraphTransferInfo_GraphOutputNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shape_.MergeFrom(from.shape_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void GraphTransferInfo_GraphOutputNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferInfo_GraphOutputNodeInfo::CopyFrom(const GraphTransferInfo_GraphOutputNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferInfo_GraphOutputNodeInfo::IsInitialized() const {
  return true;
}

void GraphTransferInfo_GraphOutputNodeInfo::Swap(GraphTransferInfo_GraphOutputNodeInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferInfo_GraphOutputNodeInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GraphTransferInfo_GraphOutputNodeInfo::UnsafeArenaSwap(GraphTransferInfo_GraphOutputNodeInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferInfo_GraphOutputNodeInfo::InternalSwap(GraphTransferInfo_GraphOutputNodeInfo* other) {
  shape_.UnsafeArenaSwap(&other->shape_);
  name_.Swap(&other->name_);
  std::swap(dtype_, other->dtype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphTransferInfo_GraphOutputNodeInfo::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphTransferInfo_GraphOutputNodeInfo

// string name = 1;
void GraphTransferInfo_GraphOutputNodeInfo::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GraphTransferInfo_GraphOutputNodeInfo::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
  return name_.Get();
}
void GraphTransferInfo_GraphOutputNodeInfo::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
}
void GraphTransferInfo_GraphOutputNodeInfo::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
}
void GraphTransferInfo_GraphOutputNodeInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
}
::std::string* GraphTransferInfo_GraphOutputNodeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GraphTransferInfo_GraphOutputNodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GraphTransferInfo_GraphOutputNodeInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GraphTransferInfo_GraphOutputNodeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
}
void GraphTransferInfo_GraphOutputNodeInfo::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
}

// repeated int64 shape = 2;
int GraphTransferInfo_GraphOutputNodeInfo::shape_size() const {
  return shape_.size();
}
void GraphTransferInfo_GraphOutputNodeInfo::clear_shape() {
  shape_.Clear();
}
::google::protobuf::int64 GraphTransferInfo_GraphOutputNodeInfo::shape(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.shape)
  return shape_.Get(index);
}
void GraphTransferInfo_GraphOutputNodeInfo::set_shape(int index, ::google::protobuf::int64 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.shape)
}
void GraphTransferInfo_GraphOutputNodeInfo::add_shape(::google::protobuf::int64 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.shape)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GraphTransferInfo_GraphOutputNodeInfo::shape() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.shape)
  return shape_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GraphTransferInfo_GraphOutputNodeInfo::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.shape)
  return &shape_;
}

// .tensorflow.DataType dtype = 3;
void GraphTransferInfo_GraphOutputNodeInfo::clear_dtype() {
  dtype_ = 0;
}
::tensorflow::DataType GraphTransferInfo_GraphOutputNodeInfo::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
void GraphTransferInfo_GraphOutputNodeInfo::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.dtype)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferInfo::kNodeInfoFieldNumber;
const int GraphTransferInfo::kConstNodeInfoFieldNumber;
const int GraphTransferInfo::kNodeInputInfoFieldNumber;
const int GraphTransferInfo::kNodeOutputInfoFieldNumber;
const int GraphTransferInfo::kGraphInputNodeInfoFieldNumber;
const int GraphTransferInfo::kGraphOutputNodeInfoFieldNumber;
const int GraphTransferInfo::kDestinationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferInfo::GraphTransferInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferInfo)
}
GraphTransferInfo::GraphTransferInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  node_info_(arena),
  const_node_info_(arena),
  node_input_info_(arena),
  node_output_info_(arena),
  graph_input_node_info_(arena),
  graph_output_node_info_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferInfo)
}
GraphTransferInfo::GraphTransferInfo(const GraphTransferInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      node_info_(from.node_info_),
      const_node_info_(from.const_node_info_),
      node_input_info_(from.node_input_info_),
      node_output_info_(from.node_output_info_),
      graph_input_node_info_(from.graph_input_node_info_),
      graph_output_node_info_(from.graph_output_node_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destination_ = from.destination_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferInfo)
}

void GraphTransferInfo::SharedCtor() {
  destination_ = 0;
  _cached_size_ = 0;
}

GraphTransferInfo::~GraphTransferInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferInfo)
  SharedDtor();
}

void GraphTransferInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void GraphTransferInfo::ArenaDtor(void* object) {
  GraphTransferInfo* _this = reinterpret_cast< GraphTransferInfo* >(object);
  (void)_this;
}
void GraphTransferInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphTransferInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphTransferInfo::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::file_level_metadata[7].descriptor;
}

const GraphTransferInfo& GraphTransferInfo::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

GraphTransferInfo* GraphTransferInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphTransferInfo>(arena);
}

void GraphTransferInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferInfo)
  node_info_.Clear();
  const_node_info_.Clear();
  node_input_info_.Clear();
  node_output_info_.Clear();
  graph_input_node_info_.Clear();
  graph_output_node_info_.Clear();
  destination_ = 0;
}

bool GraphTransferInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.GraphTransferInfo.NodeInfo node_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node_info()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.GraphTransferInfo.ConstNodeInfo const_node_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_const_node_info()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.GraphTransferInfo.NodeInputInfo node_input_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node_input_info()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.GraphTransferInfo.NodeOutputInfo node_output_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node_output_info()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.GraphTransferInfo.GraphInputNodeInfo graph_input_node_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_graph_input_node_info()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.GraphTransferInfo.GraphOutputNodeInfo graph_output_node_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_graph_output_node_info()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .tensorflow.GraphTransferInfo.Destination destination = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_destination(static_cast< ::tensorflow::GraphTransferInfo_Destination >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferInfo)
  return false;
#undef DO_
}

void GraphTransferInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferInfo)
  // repeated .tensorflow.GraphTransferInfo.NodeInfo node_info = 1;
  for (unsigned int i = 0, n = this->node_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node_info(i), output);
  }

  // repeated .tensorflow.GraphTransferInfo.ConstNodeInfo const_node_info = 2;
  for (unsigned int i = 0, n = this->const_node_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->const_node_info(i), output);
  }

  // repeated .tensorflow.GraphTransferInfo.NodeInputInfo node_input_info = 3;
  for (unsigned int i = 0, n = this->node_input_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->node_input_info(i), output);
  }

  // repeated .tensorflow.GraphTransferInfo.NodeOutputInfo node_output_info = 4;
  for (unsigned int i = 0, n = this->node_output_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->node_output_info(i), output);
  }

  // repeated .tensorflow.GraphTransferInfo.GraphInputNodeInfo graph_input_node_info = 5;
  for (unsigned int i = 0, n = this->graph_input_node_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->graph_input_node_info(i), output);
  }

  // repeated .tensorflow.GraphTransferInfo.GraphOutputNodeInfo graph_output_node_info = 6;
  for (unsigned int i = 0, n = this->graph_output_node_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->graph_output_node_info(i), output);
  }

  // .tensorflow.GraphTransferInfo.Destination destination = 7;
  if (this->destination() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->destination(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferInfo)
}

::google::protobuf::uint8* GraphTransferInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferInfo)
  // repeated .tensorflow.GraphTransferInfo.NodeInfo node_info = 1;
  for (unsigned int i = 0, n = this->node_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->node_info(i), false, target);
  }

  // repeated .tensorflow.GraphTransferInfo.ConstNodeInfo const_node_info = 2;
  for (unsigned int i = 0, n = this->const_node_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->const_node_info(i), false, target);
  }

  // repeated .tensorflow.GraphTransferInfo.NodeInputInfo node_input_info = 3;
  for (unsigned int i = 0, n = this->node_input_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->node_input_info(i), false, target);
  }

  // repeated .tensorflow.GraphTransferInfo.NodeOutputInfo node_output_info = 4;
  for (unsigned int i = 0, n = this->node_output_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->node_output_info(i), false, target);
  }

  // repeated .tensorflow.GraphTransferInfo.GraphInputNodeInfo graph_input_node_info = 5;
  for (unsigned int i = 0, n = this->graph_input_node_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->graph_input_node_info(i), false, target);
  }

  // repeated .tensorflow.GraphTransferInfo.GraphOutputNodeInfo graph_output_node_info = 6;
  for (unsigned int i = 0, n = this->graph_output_node_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->graph_output_node_info(i), false, target);
  }

  // .tensorflow.GraphTransferInfo.Destination destination = 7;
  if (this->destination() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->destination(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferInfo)
  return target;
}

size_t GraphTransferInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferInfo)
  size_t total_size = 0;

  // repeated .tensorflow.GraphTransferInfo.NodeInfo node_info = 1;
  {
    unsigned int count = this->node_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node_info(i));
    }
  }

  // repeated .tensorflow.GraphTransferInfo.ConstNodeInfo const_node_info = 2;
  {
    unsigned int count = this->const_node_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->const_node_info(i));
    }
  }

  // repeated .tensorflow.GraphTransferInfo.NodeInputInfo node_input_info = 3;
  {
    unsigned int count = this->node_input_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node_input_info(i));
    }
  }

  // repeated .tensorflow.GraphTransferInfo.NodeOutputInfo node_output_info = 4;
  {
    unsigned int count = this->node_output_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node_output_info(i));
    }
  }

  // repeated .tensorflow.GraphTransferInfo.GraphInputNodeInfo graph_input_node_info = 5;
  {
    unsigned int count = this->graph_input_node_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->graph_input_node_info(i));
    }
  }

  // repeated .tensorflow.GraphTransferInfo.GraphOutputNodeInfo graph_output_node_info = 6;
  {
    unsigned int count = this->graph_output_node_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->graph_output_node_info(i));
    }
  }

  // .tensorflow.GraphTransferInfo.Destination destination = 7;
  if (this->destination() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->destination());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphTransferInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphTransferInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphTransferInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferInfo)
    MergeFrom(*source);
  }
}

void GraphTransferInfo::MergeFrom(const GraphTransferInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_info_.MergeFrom(from.node_info_);
  const_node_info_.MergeFrom(from.const_node_info_);
  node_input_info_.MergeFrom(from.node_input_info_);
  node_output_info_.MergeFrom(from.node_output_info_);
  graph_input_node_info_.MergeFrom(from.graph_input_node_info_);
  graph_output_node_info_.MergeFrom(from.graph_output_node_info_);
  if (from.destination() != 0) {
    set_destination(from.destination());
  }
}

void GraphTransferInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferInfo::CopyFrom(const GraphTransferInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferInfo::IsInitialized() const {
  return true;
}

void GraphTransferInfo::Swap(GraphTransferInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GraphTransferInfo::UnsafeArenaSwap(GraphTransferInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferInfo::InternalSwap(GraphTransferInfo* other) {
  node_info_.UnsafeArenaSwap(&other->node_info_);
  const_node_info_.UnsafeArenaSwap(&other->const_node_info_);
  node_input_info_.UnsafeArenaSwap(&other->node_input_info_);
  node_output_info_.UnsafeArenaSwap(&other->node_output_info_);
  graph_input_node_info_.UnsafeArenaSwap(&other->graph_input_node_info_);
  graph_output_node_info_.UnsafeArenaSwap(&other->graph_output_node_info_);
  std::swap(destination_, other->destination_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphTransferInfo::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphTransferInfo

// repeated .tensorflow.GraphTransferInfo.NodeInfo node_info = 1;
int GraphTransferInfo::node_info_size() const {
  return node_info_.size();
}
void GraphTransferInfo::clear_node_info() {
  node_info_.Clear();
}
const ::tensorflow::GraphTransferInfo_NodeInfo& GraphTransferInfo::node_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.node_info)
  return node_info_.Get(index);
}
::tensorflow::GraphTransferInfo_NodeInfo* GraphTransferInfo::mutable_node_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.node_info)
  return node_info_.Mutable(index);
}
::tensorflow::GraphTransferInfo_NodeInfo* GraphTransferInfo::add_node_info() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.node_info)
  return node_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInfo >*
GraphTransferInfo::mutable_node_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.node_info)
  return &node_info_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInfo >&
GraphTransferInfo::node_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.node_info)
  return node_info_;
}

// repeated .tensorflow.GraphTransferInfo.ConstNodeInfo const_node_info = 2;
int GraphTransferInfo::const_node_info_size() const {
  return const_node_info_.size();
}
void GraphTransferInfo::clear_const_node_info() {
  const_node_info_.Clear();
}
const ::tensorflow::GraphTransferInfo_ConstNodeInfo& GraphTransferInfo::const_node_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.const_node_info)
  return const_node_info_.Get(index);
}
::tensorflow::GraphTransferInfo_ConstNodeInfo* GraphTransferInfo::mutable_const_node_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.const_node_info)
  return const_node_info_.Mutable(index);
}
::tensorflow::GraphTransferInfo_ConstNodeInfo* GraphTransferInfo::add_const_node_info() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.const_node_info)
  return const_node_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_ConstNodeInfo >*
GraphTransferInfo::mutable_const_node_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.const_node_info)
  return &const_node_info_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_ConstNodeInfo >&
GraphTransferInfo::const_node_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.const_node_info)
  return const_node_info_;
}

// repeated .tensorflow.GraphTransferInfo.NodeInputInfo node_input_info = 3;
int GraphTransferInfo::node_input_info_size() const {
  return node_input_info_.size();
}
void GraphTransferInfo::clear_node_input_info() {
  node_input_info_.Clear();
}
const ::tensorflow::GraphTransferInfo_NodeInputInfo& GraphTransferInfo::node_input_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.node_input_info)
  return node_input_info_.Get(index);
}
::tensorflow::GraphTransferInfo_NodeInputInfo* GraphTransferInfo::mutable_node_input_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.node_input_info)
  return node_input_info_.Mutable(index);
}
::tensorflow::GraphTransferInfo_NodeInputInfo* GraphTransferInfo::add_node_input_info() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.node_input_info)
  return node_input_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInputInfo >*
GraphTransferInfo::mutable_node_input_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.node_input_info)
  return &node_input_info_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInputInfo >&
GraphTransferInfo::node_input_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.node_input_info)
  return node_input_info_;
}

// repeated .tensorflow.GraphTransferInfo.NodeOutputInfo node_output_info = 4;
int GraphTransferInfo::node_output_info_size() const {
  return node_output_info_.size();
}
void GraphTransferInfo::clear_node_output_info() {
  node_output_info_.Clear();
}
const ::tensorflow::GraphTransferInfo_NodeOutputInfo& GraphTransferInfo::node_output_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.node_output_info)
  return node_output_info_.Get(index);
}
::tensorflow::GraphTransferInfo_NodeOutputInfo* GraphTransferInfo::mutable_node_output_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.node_output_info)
  return node_output_info_.Mutable(index);
}
::tensorflow::GraphTransferInfo_NodeOutputInfo* GraphTransferInfo::add_node_output_info() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.node_output_info)
  return node_output_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeOutputInfo >*
GraphTransferInfo::mutable_node_output_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.node_output_info)
  return &node_output_info_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeOutputInfo >&
GraphTransferInfo::node_output_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.node_output_info)
  return node_output_info_;
}

// repeated .tensorflow.GraphTransferInfo.GraphInputNodeInfo graph_input_node_info = 5;
int GraphTransferInfo::graph_input_node_info_size() const {
  return graph_input_node_info_.size();
}
void GraphTransferInfo::clear_graph_input_node_info() {
  graph_input_node_info_.Clear();
}
const ::tensorflow::GraphTransferInfo_GraphInputNodeInfo& GraphTransferInfo::graph_input_node_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.graph_input_node_info)
  return graph_input_node_info_.Get(index);
}
::tensorflow::GraphTransferInfo_GraphInputNodeInfo* GraphTransferInfo::mutable_graph_input_node_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.graph_input_node_info)
  return graph_input_node_info_.Mutable(index);
}
::tensorflow::GraphTransferInfo_GraphInputNodeInfo* GraphTransferInfo::add_graph_input_node_info() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.graph_input_node_info)
  return graph_input_node_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_GraphInputNodeInfo >*
GraphTransferInfo::mutable_graph_input_node_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.graph_input_node_info)
  return &graph_input_node_info_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_GraphInputNodeInfo >&
GraphTransferInfo::graph_input_node_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.graph_input_node_info)
  return graph_input_node_info_;
}

// repeated .tensorflow.GraphTransferInfo.GraphOutputNodeInfo graph_output_node_info = 6;
int GraphTransferInfo::graph_output_node_info_size() const {
  return graph_output_node_info_.size();
}
void GraphTransferInfo::clear_graph_output_node_info() {
  graph_output_node_info_.Clear();
}
const ::tensorflow::GraphTransferInfo_GraphOutputNodeInfo& GraphTransferInfo::graph_output_node_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.graph_output_node_info)
  return graph_output_node_info_.Get(index);
}
::tensorflow::GraphTransferInfo_GraphOutputNodeInfo* GraphTransferInfo::mutable_graph_output_node_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.graph_output_node_info)
  return graph_output_node_info_.Mutable(index);
}
::tensorflow::GraphTransferInfo_GraphOutputNodeInfo* GraphTransferInfo::add_graph_output_node_info() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.graph_output_node_info)
  return graph_output_node_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_GraphOutputNodeInfo >*
GraphTransferInfo::mutable_graph_output_node_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.graph_output_node_info)
  return &graph_output_node_info_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_GraphOutputNodeInfo >&
GraphTransferInfo::graph_output_node_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.graph_output_node_info)
  return graph_output_node_info_;
}

// .tensorflow.GraphTransferInfo.Destination destination = 7;
void GraphTransferInfo::clear_destination() {
  destination_ = 0;
}
::tensorflow::GraphTransferInfo_Destination GraphTransferInfo::destination() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.destination)
  return static_cast< ::tensorflow::GraphTransferInfo_Destination >(destination_);
}
void GraphTransferInfo::set_destination(::tensorflow::GraphTransferInfo_Destination value) {
  
  destination_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.destination)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
