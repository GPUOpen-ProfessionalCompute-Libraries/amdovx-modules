// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/log_memory.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/framework/log_memory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
class MemoryLogStepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemoryLogStep> {
} _MemoryLogStep_default_instance_;
class MemoryLogTensorAllocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemoryLogTensorAllocation> {
} _MemoryLogTensorAllocation_default_instance_;
class MemoryLogTensorDeallocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemoryLogTensorDeallocation> {
} _MemoryLogTensorDeallocation_default_instance_;
class MemoryLogTensorOutputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemoryLogTensorOutput> {
} _MemoryLogTensorOutput_default_instance_;
class MemoryLogRawAllocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemoryLogRawAllocation> {
} _MemoryLogRawAllocation_default_instance_;
class MemoryLogRawDeallocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemoryLogRawDeallocation> {
} _MemoryLogRawDeallocation_default_instance_;

namespace protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogStep, step_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogStep, handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogTensorAllocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogTensorAllocation, step_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogTensorAllocation, kernel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogTensorAllocation, tensor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogTensorDeallocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogTensorDeallocation, allocation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogTensorDeallocation, allocator_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogTensorOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogTensorOutput, step_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogTensorOutput, kernel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogTensorOutput, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogTensorOutput, tensor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogRawAllocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogRawAllocation, step_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogRawAllocation, operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogRawAllocation, num_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogRawAllocation, ptr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogRawAllocation, allocation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogRawAllocation, allocator_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogRawDeallocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogRawDeallocation, step_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogRawDeallocation, operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogRawDeallocation, allocation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogRawDeallocation, allocator_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLogRawDeallocation, deferred_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(MemoryLogStep)},
  { 6, -1, sizeof(MemoryLogTensorAllocation)},
  { 13, -1, sizeof(MemoryLogTensorDeallocation)},
  { 19, -1, sizeof(MemoryLogTensorOutput)},
  { 27, -1, sizeof(MemoryLogRawAllocation)},
  { 37, -1, sizeof(MemoryLogRawDeallocation)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemoryLogStep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemoryLogTensorAllocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemoryLogTensorDeallocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemoryLogTensorOutput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemoryLogRawAllocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemoryLogRawDeallocation_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/core/framework/log_memory.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

GOOGLE_ATTRIBUTE_NOINLINE void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _MemoryLogStep_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MemoryLogTensorAllocation_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _MemoryLogTensorDeallocation_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _MemoryLogTensorOutput_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _MemoryLogRawAllocation_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _MemoryLogRawDeallocation_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto::InitDefaults();
  _MemoryLogStep_default_instance_.DefaultConstruct();
  _MemoryLogTensorAllocation_default_instance_.DefaultConstruct();
  _MemoryLogTensorDeallocation_default_instance_.DefaultConstruct();
  _MemoryLogTensorOutput_default_instance_.DefaultConstruct();
  _MemoryLogRawAllocation_default_instance_.DefaultConstruct();
  _MemoryLogRawDeallocation_default_instance_.DefaultConstruct();
  _MemoryLogTensorAllocation_default_instance_.get_mutable()->tensor_ = const_cast< ::tensorflow::TensorDescription*>(
      ::tensorflow::TensorDescription::internal_default_instance());
  _MemoryLogTensorOutput_default_instance_.get_mutable()->tensor_ = const_cast< ::tensorflow::TensorDescription*>(
      ::tensorflow::TensorDescription::internal_default_instance());
}

GOOGLE_ATTRIBUTE_NOINLINE void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n*tensorflow/core/framework/log_memory.p"
      "roto\022\ntensorflow\0322tensorflow/core/framew"
      "ork/tensor_description.proto\"0\n\rMemoryLo"
      "gStep\022\017\n\007step_id\030\001 \001(\003\022\016\n\006handle\030\002 \001(\t\"p"
      "\n\031MemoryLogTensorAllocation\022\017\n\007step_id\030\001"
      " \001(\003\022\023\n\013kernel_name\030\002 \001(\t\022-\n\006tensor\030\003 \001("
      "\0132\035.tensorflow.TensorDescription\"L\n\033Memo"
      "ryLogTensorDeallocation\022\025\n\rallocation_id"
      "\030\001 \001(\003\022\026\n\016allocator_name\030\002 \001(\t\"{\n\025Memory"
      "LogTensorOutput\022\017\n\007step_id\030\001 \001(\003\022\023\n\013kern"
      "el_name\030\002 \001(\t\022\r\n\005index\030\003 \001(\005\022-\n\006tensor\030\004"
      " \001(\0132\035.tensorflow.TensorDescription\"\213\001\n\026"
      "MemoryLogRawAllocation\022\017\n\007step_id\030\001 \001(\003\022"
      "\021\n\toperation\030\002 \001(\t\022\021\n\tnum_bytes\030\003 \001(\003\022\013\n"
      "\003ptr\030\004 \001(\004\022\025\n\rallocation_id\030\005 \001(\003\022\026\n\016all"
      "ocator_name\030\006 \001(\t\"\177\n\030MemoryLogRawDealloc"
      "ation\022\017\n\007step_id\030\001 \001(\003\022\021\n\toperation\030\002 \001("
      "\t\022\025\n\rallocation_id\030\003 \001(\003\022\026\n\016allocator_na"
      "me\030\004 \001(\t\022\020\n\010deferred\030\005 \001(\010B0\n\030org.tensor"
      "flow.frameworkB\017LogMemoryProtosP\001\370\001\001b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 804);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/framework/log_memory.proto", &protobuf_RegisterTypes);
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

GOOGLE_ATTRIBUTE_NOINLINE void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLogStep::kStepIdFieldNumber;
const int MemoryLogStep::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLogStep::MemoryLogStep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemoryLogStep)
}
MemoryLogStep::MemoryLogStep(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryLogStep)
}
MemoryLogStep::MemoryLogStep(const MemoryLogStep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.handle().size() > 0) {
    handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.handle(),
      GetArenaNoVirtual());
  }
  step_id_ = from.step_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryLogStep)
}

void MemoryLogStep::SharedCtor() {
  handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  step_id_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

MemoryLogStep::~MemoryLogStep() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryLogStep)
  SharedDtor();
}

void MemoryLogStep::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void MemoryLogStep::ArenaDtor(void* object) {
  MemoryLogStep* _this = reinterpret_cast< MemoryLogStep* >(object);
  (void)_this;
}
void MemoryLogStep::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MemoryLogStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryLogStep::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::file_level_metadata[0].descriptor;
}

const MemoryLogStep& MemoryLogStep::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemoryLogStep* MemoryLogStep::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MemoryLogStep>(arena);
}

void MemoryLogStep::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryLogStep)
  handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  step_id_ = GOOGLE_LONGLONG(0);
}

bool MemoryLogStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemoryLogStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->handle().data(), this->handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.MemoryLogStep.handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemoryLogStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemoryLogStep)
  return false;
#undef DO_
}

void MemoryLogStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemoryLogStep)
  // int64 step_id = 1;
  if (this->step_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // string handle = 2;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogStep.handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.MemoryLogStep)
}

::google::protobuf::uint8* MemoryLogStep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryLogStep)
  // int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // string handle = 2;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogStep.handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryLogStep)
  return target;
}

size_t MemoryLogStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryLogStep)
  size_t total_size = 0;

  // string handle = 2;
  if (this->handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->handle());
  }

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryLogStep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryLogStep)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryLogStep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryLogStep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryLogStep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryLogStep)
    MergeFrom(*source);
  }
}

void MemoryLogStep::MergeFrom(const MemoryLogStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryLogStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.handle().size() > 0) {
    set_handle(from.handle());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
}

void MemoryLogStep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryLogStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryLogStep::CopyFrom(const MemoryLogStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryLogStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLogStep::IsInitialized() const {
  return true;
}

void MemoryLogStep::Swap(MemoryLogStep* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MemoryLogStep* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MemoryLogStep::UnsafeArenaSwap(MemoryLogStep* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MemoryLogStep::InternalSwap(MemoryLogStep* other) {
  handle_.Swap(&other->handle_);
  std::swap(step_id_, other->step_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryLogStep::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryLogStep

// int64 step_id = 1;
void MemoryLogStep::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MemoryLogStep::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogStep.step_id)
  return step_id_;
}
void MemoryLogStep::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogStep.step_id)
}

// string handle = 2;
void MemoryLogStep::clear_handle() {
  handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MemoryLogStep::handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogStep.handle)
  return handle_.Get();
}
void MemoryLogStep::set_handle(const ::std::string& value) {
  
  handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogStep.handle)
}
void MemoryLogStep::set_handle(const char* value) {
  
  handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MemoryLogStep.handle)
}
void MemoryLogStep::set_handle(const char* value,
    size_t size) {
  
  handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemoryLogStep.handle)
}
::std::string* MemoryLogStep::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogStep.handle)
  return handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MemoryLogStep::release_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogStep.handle)
  
  return handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MemoryLogStep::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogStep.handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MemoryLogStep::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogStep.handle)
}
void MemoryLogStep::unsafe_arena_set_allocated_handle(
    ::std::string* handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogStep.handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void MemoryLogTensorAllocation::_slow_mutable_tensor() {
  tensor_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorDescription >(
      GetArenaNoVirtual());
}
::tensorflow::TensorDescription* MemoryLogTensorAllocation::_slow_release_tensor() {
  if (tensor_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorDescription* temp = new ::tensorflow::TensorDescription(*tensor_);
    tensor_ = NULL;
    return temp;
  }
}
::tensorflow::TensorDescription* MemoryLogTensorAllocation::unsafe_arena_release_tensor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogTensorAllocation.tensor)
  
  ::tensorflow::TensorDescription* temp = tensor_;
  tensor_ = NULL;
  return temp;
}
void MemoryLogTensorAllocation::_slow_set_allocated_tensor(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorDescription** tensor) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*tensor) == NULL) {
      message_arena->Own(*tensor);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*tensor)) {
      ::tensorflow::TensorDescription* new_tensor = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorDescription >(
            message_arena);
      new_tensor->CopyFrom(**tensor);
      *tensor = new_tensor;
    }
}
void MemoryLogTensorAllocation::unsafe_arena_set_allocated_tensor(
    ::tensorflow::TensorDescription* tensor) {
  if (GetArenaNoVirtual() == NULL) {
    delete tensor_;
  }
  tensor_ = tensor;
  if (tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogTensorAllocation.tensor)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLogTensorAllocation::kStepIdFieldNumber;
const int MemoryLogTensorAllocation::kKernelNameFieldNumber;
const int MemoryLogTensorAllocation::kTensorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLogTensorAllocation::MemoryLogTensorAllocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemoryLogTensorAllocation)
}
MemoryLogTensorAllocation::MemoryLogTensorAllocation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryLogTensorAllocation)
}
MemoryLogTensorAllocation::MemoryLogTensorAllocation(const MemoryLogTensorAllocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kernel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kernel_name().size() > 0) {
    kernel_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kernel_name(),
      GetArenaNoVirtual());
  }
  if (from.has_tensor()) {
    tensor_ = new ::tensorflow::TensorDescription(*from.tensor_);
  } else {
    tensor_ = NULL;
  }
  step_id_ = from.step_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryLogTensorAllocation)
}

void MemoryLogTensorAllocation::SharedCtor() {
  kernel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tensor_, 0, reinterpret_cast<char*>(&step_id_) -
    reinterpret_cast<char*>(&tensor_) + sizeof(step_id_));
  _cached_size_ = 0;
}

MemoryLogTensorAllocation::~MemoryLogTensorAllocation() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryLogTensorAllocation)
  SharedDtor();
}

void MemoryLogTensorAllocation::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  kernel_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete tensor_;
  }
}

void MemoryLogTensorAllocation::ArenaDtor(void* object) {
  MemoryLogTensorAllocation* _this = reinterpret_cast< MemoryLogTensorAllocation* >(object);
  (void)_this;
}
void MemoryLogTensorAllocation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MemoryLogTensorAllocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryLogTensorAllocation::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::file_level_metadata[1].descriptor;
}

const MemoryLogTensorAllocation& MemoryLogTensorAllocation::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemoryLogTensorAllocation* MemoryLogTensorAllocation::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MemoryLogTensorAllocation>(arena);
}

void MemoryLogTensorAllocation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryLogTensorAllocation)
  kernel_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && tensor_ != NULL) {
    delete tensor_;
  }
  tensor_ = NULL;
  step_id_ = GOOGLE_LONGLONG(0);
}

bool MemoryLogTensorAllocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemoryLogTensorAllocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kernel_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kernel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kernel_name().data(), this->kernel_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.MemoryLogTensorAllocation.kernel_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorDescription tensor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemoryLogTensorAllocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemoryLogTensorAllocation)
  return false;
#undef DO_
}

void MemoryLogTensorAllocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemoryLogTensorAllocation)
  // int64 step_id = 1;
  if (this->step_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // string kernel_name = 2;
  if (this->kernel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kernel_name().data(), this->kernel_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogTensorAllocation.kernel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kernel_name(), output);
  }

  // .tensorflow.TensorDescription tensor = 3;
  if (this->has_tensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->tensor_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.MemoryLogTensorAllocation)
}

::google::protobuf::uint8* MemoryLogTensorAllocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryLogTensorAllocation)
  // int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // string kernel_name = 2;
  if (this->kernel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kernel_name().data(), this->kernel_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogTensorAllocation.kernel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kernel_name(), target);
  }

  // .tensorflow.TensorDescription tensor = 3;
  if (this->has_tensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->tensor_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryLogTensorAllocation)
  return target;
}

size_t MemoryLogTensorAllocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryLogTensorAllocation)
  size_t total_size = 0;

  // string kernel_name = 2;
  if (this->kernel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kernel_name());
  }

  // .tensorflow.TensorDescription tensor = 3;
  if (this->has_tensor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_);
  }

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryLogTensorAllocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryLogTensorAllocation)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryLogTensorAllocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryLogTensorAllocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryLogTensorAllocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryLogTensorAllocation)
    MergeFrom(*source);
  }
}

void MemoryLogTensorAllocation::MergeFrom(const MemoryLogTensorAllocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryLogTensorAllocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.kernel_name().size() > 0) {
    set_kernel_name(from.kernel_name());
  }
  if (from.has_tensor()) {
    mutable_tensor()->::tensorflow::TensorDescription::MergeFrom(from.tensor());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
}

void MemoryLogTensorAllocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryLogTensorAllocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryLogTensorAllocation::CopyFrom(const MemoryLogTensorAllocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryLogTensorAllocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLogTensorAllocation::IsInitialized() const {
  return true;
}

void MemoryLogTensorAllocation::Swap(MemoryLogTensorAllocation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MemoryLogTensorAllocation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MemoryLogTensorAllocation::UnsafeArenaSwap(MemoryLogTensorAllocation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MemoryLogTensorAllocation::InternalSwap(MemoryLogTensorAllocation* other) {
  kernel_name_.Swap(&other->kernel_name_);
  std::swap(tensor_, other->tensor_);
  std::swap(step_id_, other->step_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryLogTensorAllocation::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryLogTensorAllocation

// int64 step_id = 1;
void MemoryLogTensorAllocation::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MemoryLogTensorAllocation::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorAllocation.step_id)
  return step_id_;
}
void MemoryLogTensorAllocation::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorAllocation.step_id)
}

// string kernel_name = 2;
void MemoryLogTensorAllocation::clear_kernel_name() {
  kernel_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MemoryLogTensorAllocation::kernel_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorAllocation.kernel_name)
  return kernel_name_.Get();
}
void MemoryLogTensorAllocation::set_kernel_name(const ::std::string& value) {
  
  kernel_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorAllocation.kernel_name)
}
void MemoryLogTensorAllocation::set_kernel_name(const char* value) {
  
  kernel_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MemoryLogTensorAllocation.kernel_name)
}
void MemoryLogTensorAllocation::set_kernel_name(const char* value,
    size_t size) {
  
  kernel_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemoryLogTensorAllocation.kernel_name)
}
::std::string* MemoryLogTensorAllocation::mutable_kernel_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogTensorAllocation.kernel_name)
  return kernel_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MemoryLogTensorAllocation::release_kernel_name() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogTensorAllocation.kernel_name)
  
  return kernel_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MemoryLogTensorAllocation::unsafe_arena_release_kernel_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogTensorAllocation.kernel_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kernel_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MemoryLogTensorAllocation::set_allocated_kernel_name(::std::string* kernel_name) {
  if (kernel_name != NULL) {
    
  } else {
    
  }
  kernel_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kernel_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogTensorAllocation.kernel_name)
}
void MemoryLogTensorAllocation::unsafe_arena_set_allocated_kernel_name(
    ::std::string* kernel_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kernel_name != NULL) {
    
  } else {
    
  }
  kernel_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kernel_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogTensorAllocation.kernel_name)
}

// .tensorflow.TensorDescription tensor = 3;
bool MemoryLogTensorAllocation::has_tensor() const {
  return this != internal_default_instance() && tensor_ != NULL;
}
void MemoryLogTensorAllocation::clear_tensor() {
  if (GetArenaNoVirtual() == NULL && tensor_ != NULL) delete tensor_;
  tensor_ = NULL;
}
const ::tensorflow::TensorDescription& MemoryLogTensorAllocation::tensor() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorAllocation.tensor)
  return tensor_ != NULL ? *tensor_
                         : *::tensorflow::TensorDescription::internal_default_instance();
}
::tensorflow::TensorDescription* MemoryLogTensorAllocation::mutable_tensor() {
  
  if (tensor_ == NULL) {
    _slow_mutable_tensor();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogTensorAllocation.tensor)
  return tensor_;
}
::tensorflow::TensorDescription* MemoryLogTensorAllocation::release_tensor() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogTensorAllocation.tensor)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_tensor();
  } else {
    ::tensorflow::TensorDescription* temp = tensor_;
    tensor_ = NULL;
    return temp;
  }
}
 void MemoryLogTensorAllocation::set_allocated_tensor(::tensorflow::TensorDescription* tensor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tensor_;
  }
  if (tensor != NULL) {
    _slow_set_allocated_tensor(message_arena, &tensor);
  }
  tensor_ = tensor;
  if (tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogTensorAllocation.tensor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLogTensorDeallocation::kAllocationIdFieldNumber;
const int MemoryLogTensorDeallocation::kAllocatorNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLogTensorDeallocation::MemoryLogTensorDeallocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemoryLogTensorDeallocation)
}
MemoryLogTensorDeallocation::MemoryLogTensorDeallocation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryLogTensorDeallocation)
}
MemoryLogTensorDeallocation::MemoryLogTensorDeallocation(const MemoryLogTensorDeallocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  allocator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.allocator_name().size() > 0) {
    allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.allocator_name(),
      GetArenaNoVirtual());
  }
  allocation_id_ = from.allocation_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryLogTensorDeallocation)
}

void MemoryLogTensorDeallocation::SharedCtor() {
  allocator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allocation_id_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

MemoryLogTensorDeallocation::~MemoryLogTensorDeallocation() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryLogTensorDeallocation)
  SharedDtor();
}

void MemoryLogTensorDeallocation::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  allocator_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void MemoryLogTensorDeallocation::ArenaDtor(void* object) {
  MemoryLogTensorDeallocation* _this = reinterpret_cast< MemoryLogTensorDeallocation* >(object);
  (void)_this;
}
void MemoryLogTensorDeallocation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MemoryLogTensorDeallocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryLogTensorDeallocation::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::file_level_metadata[2].descriptor;
}

const MemoryLogTensorDeallocation& MemoryLogTensorDeallocation::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemoryLogTensorDeallocation* MemoryLogTensorDeallocation::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MemoryLogTensorDeallocation>(arena);
}

void MemoryLogTensorDeallocation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryLogTensorDeallocation)
  allocator_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  allocation_id_ = GOOGLE_LONGLONG(0);
}

bool MemoryLogTensorDeallocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemoryLogTensorDeallocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 allocation_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &allocation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string allocator_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allocator_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->allocator_name().data(), this->allocator_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.MemoryLogTensorDeallocation.allocator_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemoryLogTensorDeallocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemoryLogTensorDeallocation)
  return false;
#undef DO_
}

void MemoryLogTensorDeallocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemoryLogTensorDeallocation)
  // int64 allocation_id = 1;
  if (this->allocation_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->allocation_id(), output);
  }

  // string allocator_name = 2;
  if (this->allocator_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), this->allocator_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogTensorDeallocation.allocator_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->allocator_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.MemoryLogTensorDeallocation)
}

::google::protobuf::uint8* MemoryLogTensorDeallocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryLogTensorDeallocation)
  // int64 allocation_id = 1;
  if (this->allocation_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->allocation_id(), target);
  }

  // string allocator_name = 2;
  if (this->allocator_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), this->allocator_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogTensorDeallocation.allocator_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->allocator_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryLogTensorDeallocation)
  return target;
}

size_t MemoryLogTensorDeallocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryLogTensorDeallocation)
  size_t total_size = 0;

  // string allocator_name = 2;
  if (this->allocator_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->allocator_name());
  }

  // int64 allocation_id = 1;
  if (this->allocation_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->allocation_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryLogTensorDeallocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryLogTensorDeallocation)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryLogTensorDeallocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryLogTensorDeallocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryLogTensorDeallocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryLogTensorDeallocation)
    MergeFrom(*source);
  }
}

void MemoryLogTensorDeallocation::MergeFrom(const MemoryLogTensorDeallocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryLogTensorDeallocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.allocator_name().size() > 0) {
    set_allocator_name(from.allocator_name());
  }
  if (from.allocation_id() != 0) {
    set_allocation_id(from.allocation_id());
  }
}

void MemoryLogTensorDeallocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryLogTensorDeallocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryLogTensorDeallocation::CopyFrom(const MemoryLogTensorDeallocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryLogTensorDeallocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLogTensorDeallocation::IsInitialized() const {
  return true;
}

void MemoryLogTensorDeallocation::Swap(MemoryLogTensorDeallocation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MemoryLogTensorDeallocation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MemoryLogTensorDeallocation::UnsafeArenaSwap(MemoryLogTensorDeallocation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MemoryLogTensorDeallocation::InternalSwap(MemoryLogTensorDeallocation* other) {
  allocator_name_.Swap(&other->allocator_name_);
  std::swap(allocation_id_, other->allocation_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryLogTensorDeallocation::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryLogTensorDeallocation

// int64 allocation_id = 1;
void MemoryLogTensorDeallocation::clear_allocation_id() {
  allocation_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MemoryLogTensorDeallocation::allocation_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorDeallocation.allocation_id)
  return allocation_id_;
}
void MemoryLogTensorDeallocation::set_allocation_id(::google::protobuf::int64 value) {
  
  allocation_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorDeallocation.allocation_id)
}

// string allocator_name = 2;
void MemoryLogTensorDeallocation::clear_allocator_name() {
  allocator_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MemoryLogTensorDeallocation::allocator_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorDeallocation.allocator_name)
  return allocator_name_.Get();
}
void MemoryLogTensorDeallocation::set_allocator_name(const ::std::string& value) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorDeallocation.allocator_name)
}
void MemoryLogTensorDeallocation::set_allocator_name(const char* value) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MemoryLogTensorDeallocation.allocator_name)
}
void MemoryLogTensorDeallocation::set_allocator_name(const char* value,
    size_t size) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemoryLogTensorDeallocation.allocator_name)
}
::std::string* MemoryLogTensorDeallocation::mutable_allocator_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogTensorDeallocation.allocator_name)
  return allocator_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MemoryLogTensorDeallocation::release_allocator_name() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogTensorDeallocation.allocator_name)
  
  return allocator_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MemoryLogTensorDeallocation::unsafe_arena_release_allocator_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogTensorDeallocation.allocator_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return allocator_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MemoryLogTensorDeallocation::set_allocated_allocator_name(::std::string* allocator_name) {
  if (allocator_name != NULL) {
    
  } else {
    
  }
  allocator_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allocator_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogTensorDeallocation.allocator_name)
}
void MemoryLogTensorDeallocation::unsafe_arena_set_allocated_allocator_name(
    ::std::string* allocator_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (allocator_name != NULL) {
    
  } else {
    
  }
  allocator_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      allocator_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogTensorDeallocation.allocator_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void MemoryLogTensorOutput::_slow_mutable_tensor() {
  tensor_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorDescription >(
      GetArenaNoVirtual());
}
::tensorflow::TensorDescription* MemoryLogTensorOutput::_slow_release_tensor() {
  if (tensor_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorDescription* temp = new ::tensorflow::TensorDescription(*tensor_);
    tensor_ = NULL;
    return temp;
  }
}
::tensorflow::TensorDescription* MemoryLogTensorOutput::unsafe_arena_release_tensor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogTensorOutput.tensor)
  
  ::tensorflow::TensorDescription* temp = tensor_;
  tensor_ = NULL;
  return temp;
}
void MemoryLogTensorOutput::_slow_set_allocated_tensor(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorDescription** tensor) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*tensor) == NULL) {
      message_arena->Own(*tensor);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*tensor)) {
      ::tensorflow::TensorDescription* new_tensor = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorDescription >(
            message_arena);
      new_tensor->CopyFrom(**tensor);
      *tensor = new_tensor;
    }
}
void MemoryLogTensorOutput::unsafe_arena_set_allocated_tensor(
    ::tensorflow::TensorDescription* tensor) {
  if (GetArenaNoVirtual() == NULL) {
    delete tensor_;
  }
  tensor_ = tensor;
  if (tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogTensorOutput.tensor)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLogTensorOutput::kStepIdFieldNumber;
const int MemoryLogTensorOutput::kKernelNameFieldNumber;
const int MemoryLogTensorOutput::kIndexFieldNumber;
const int MemoryLogTensorOutput::kTensorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLogTensorOutput::MemoryLogTensorOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemoryLogTensorOutput)
}
MemoryLogTensorOutput::MemoryLogTensorOutput(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryLogTensorOutput)
}
MemoryLogTensorOutput::MemoryLogTensorOutput(const MemoryLogTensorOutput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kernel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kernel_name().size() > 0) {
    kernel_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kernel_name(),
      GetArenaNoVirtual());
  }
  if (from.has_tensor()) {
    tensor_ = new ::tensorflow::TensorDescription(*from.tensor_);
  } else {
    tensor_ = NULL;
  }
  ::memcpy(&step_id_, &from.step_id_,
    reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&step_id_) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryLogTensorOutput)
}

void MemoryLogTensorOutput::SharedCtor() {
  kernel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tensor_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&tensor_) + sizeof(index_));
  _cached_size_ = 0;
}

MemoryLogTensorOutput::~MemoryLogTensorOutput() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryLogTensorOutput)
  SharedDtor();
}

void MemoryLogTensorOutput::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  kernel_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete tensor_;
  }
}

void MemoryLogTensorOutput::ArenaDtor(void* object) {
  MemoryLogTensorOutput* _this = reinterpret_cast< MemoryLogTensorOutput* >(object);
  (void)_this;
}
void MemoryLogTensorOutput::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MemoryLogTensorOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryLogTensorOutput::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::file_level_metadata[3].descriptor;
}

const MemoryLogTensorOutput& MemoryLogTensorOutput::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemoryLogTensorOutput* MemoryLogTensorOutput::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MemoryLogTensorOutput>(arena);
}

void MemoryLogTensorOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryLogTensorOutput)
  kernel_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && tensor_ != NULL) {
    delete tensor_;
  }
  tensor_ = NULL;
  ::memset(&step_id_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&step_id_) + sizeof(index_));
}

bool MemoryLogTensorOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemoryLogTensorOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kernel_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kernel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kernel_name().data(), this->kernel_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.MemoryLogTensorOutput.kernel_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorDescription tensor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemoryLogTensorOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemoryLogTensorOutput)
  return false;
#undef DO_
}

void MemoryLogTensorOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemoryLogTensorOutput)
  // int64 step_id = 1;
  if (this->step_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // string kernel_name = 2;
  if (this->kernel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kernel_name().data(), this->kernel_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogTensorOutput.kernel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kernel_name(), output);
  }

  // int32 index = 3;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // .tensorflow.TensorDescription tensor = 4;
  if (this->has_tensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->tensor_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.MemoryLogTensorOutput)
}

::google::protobuf::uint8* MemoryLogTensorOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryLogTensorOutput)
  // int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // string kernel_name = 2;
  if (this->kernel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kernel_name().data(), this->kernel_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogTensorOutput.kernel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kernel_name(), target);
  }

  // int32 index = 3;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // .tensorflow.TensorDescription tensor = 4;
  if (this->has_tensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->tensor_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryLogTensorOutput)
  return target;
}

size_t MemoryLogTensorOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryLogTensorOutput)
  size_t total_size = 0;

  // string kernel_name = 2;
  if (this->kernel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kernel_name());
  }

  // .tensorflow.TensorDescription tensor = 4;
  if (this->has_tensor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_);
  }

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  // int32 index = 3;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryLogTensorOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryLogTensorOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryLogTensorOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryLogTensorOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryLogTensorOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryLogTensorOutput)
    MergeFrom(*source);
  }
}

void MemoryLogTensorOutput::MergeFrom(const MemoryLogTensorOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryLogTensorOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.kernel_name().size() > 0) {
    set_kernel_name(from.kernel_name());
  }
  if (from.has_tensor()) {
    mutable_tensor()->::tensorflow::TensorDescription::MergeFrom(from.tensor());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void MemoryLogTensorOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryLogTensorOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryLogTensorOutput::CopyFrom(const MemoryLogTensorOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryLogTensorOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLogTensorOutput::IsInitialized() const {
  return true;
}

void MemoryLogTensorOutput::Swap(MemoryLogTensorOutput* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MemoryLogTensorOutput* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MemoryLogTensorOutput::UnsafeArenaSwap(MemoryLogTensorOutput* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MemoryLogTensorOutput::InternalSwap(MemoryLogTensorOutput* other) {
  kernel_name_.Swap(&other->kernel_name_);
  std::swap(tensor_, other->tensor_);
  std::swap(step_id_, other->step_id_);
  std::swap(index_, other->index_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryLogTensorOutput::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryLogTensorOutput

// int64 step_id = 1;
void MemoryLogTensorOutput::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MemoryLogTensorOutput::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorOutput.step_id)
  return step_id_;
}
void MemoryLogTensorOutput::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorOutput.step_id)
}

// string kernel_name = 2;
void MemoryLogTensorOutput::clear_kernel_name() {
  kernel_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MemoryLogTensorOutput::kernel_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorOutput.kernel_name)
  return kernel_name_.Get();
}
void MemoryLogTensorOutput::set_kernel_name(const ::std::string& value) {
  
  kernel_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorOutput.kernel_name)
}
void MemoryLogTensorOutput::set_kernel_name(const char* value) {
  
  kernel_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MemoryLogTensorOutput.kernel_name)
}
void MemoryLogTensorOutput::set_kernel_name(const char* value,
    size_t size) {
  
  kernel_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemoryLogTensorOutput.kernel_name)
}
::std::string* MemoryLogTensorOutput::mutable_kernel_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogTensorOutput.kernel_name)
  return kernel_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MemoryLogTensorOutput::release_kernel_name() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogTensorOutput.kernel_name)
  
  return kernel_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MemoryLogTensorOutput::unsafe_arena_release_kernel_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogTensorOutput.kernel_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kernel_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MemoryLogTensorOutput::set_allocated_kernel_name(::std::string* kernel_name) {
  if (kernel_name != NULL) {
    
  } else {
    
  }
  kernel_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kernel_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogTensorOutput.kernel_name)
}
void MemoryLogTensorOutput::unsafe_arena_set_allocated_kernel_name(
    ::std::string* kernel_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kernel_name != NULL) {
    
  } else {
    
  }
  kernel_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kernel_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogTensorOutput.kernel_name)
}

// int32 index = 3;
void MemoryLogTensorOutput::clear_index() {
  index_ = 0;
}
::google::protobuf::int32 MemoryLogTensorOutput::index() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorOutput.index)
  return index_;
}
void MemoryLogTensorOutput::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorOutput.index)
}

// .tensorflow.TensorDescription tensor = 4;
bool MemoryLogTensorOutput::has_tensor() const {
  return this != internal_default_instance() && tensor_ != NULL;
}
void MemoryLogTensorOutput::clear_tensor() {
  if (GetArenaNoVirtual() == NULL && tensor_ != NULL) delete tensor_;
  tensor_ = NULL;
}
const ::tensorflow::TensorDescription& MemoryLogTensorOutput::tensor() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorOutput.tensor)
  return tensor_ != NULL ? *tensor_
                         : *::tensorflow::TensorDescription::internal_default_instance();
}
::tensorflow::TensorDescription* MemoryLogTensorOutput::mutable_tensor() {
  
  if (tensor_ == NULL) {
    _slow_mutable_tensor();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogTensorOutput.tensor)
  return tensor_;
}
::tensorflow::TensorDescription* MemoryLogTensorOutput::release_tensor() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogTensorOutput.tensor)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_tensor();
  } else {
    ::tensorflow::TensorDescription* temp = tensor_;
    tensor_ = NULL;
    return temp;
  }
}
 void MemoryLogTensorOutput::set_allocated_tensor(::tensorflow::TensorDescription* tensor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tensor_;
  }
  if (tensor != NULL) {
    _slow_set_allocated_tensor(message_arena, &tensor);
  }
  tensor_ = tensor;
  if (tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogTensorOutput.tensor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLogRawAllocation::kStepIdFieldNumber;
const int MemoryLogRawAllocation::kOperationFieldNumber;
const int MemoryLogRawAllocation::kNumBytesFieldNumber;
const int MemoryLogRawAllocation::kPtrFieldNumber;
const int MemoryLogRawAllocation::kAllocationIdFieldNumber;
const int MemoryLogRawAllocation::kAllocatorNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLogRawAllocation::MemoryLogRawAllocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemoryLogRawAllocation)
}
MemoryLogRawAllocation::MemoryLogRawAllocation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryLogRawAllocation)
}
MemoryLogRawAllocation::MemoryLogRawAllocation(const MemoryLogRawAllocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.operation().size() > 0) {
    operation_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation(),
      GetArenaNoVirtual());
  }
  allocator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.allocator_name().size() > 0) {
    allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.allocator_name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&step_id_, &from.step_id_,
    reinterpret_cast<char*>(&allocation_id_) -
    reinterpret_cast<char*>(&step_id_) + sizeof(allocation_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryLogRawAllocation)
}

void MemoryLogRawAllocation::SharedCtor() {
  operation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allocator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&step_id_, 0, reinterpret_cast<char*>(&allocation_id_) -
    reinterpret_cast<char*>(&step_id_) + sizeof(allocation_id_));
  _cached_size_ = 0;
}

MemoryLogRawAllocation::~MemoryLogRawAllocation() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryLogRawAllocation)
  SharedDtor();
}

void MemoryLogRawAllocation::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  operation_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  allocator_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void MemoryLogRawAllocation::ArenaDtor(void* object) {
  MemoryLogRawAllocation* _this = reinterpret_cast< MemoryLogRawAllocation* >(object);
  (void)_this;
}
void MemoryLogRawAllocation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MemoryLogRawAllocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryLogRawAllocation::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::file_level_metadata[4].descriptor;
}

const MemoryLogRawAllocation& MemoryLogRawAllocation::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemoryLogRawAllocation* MemoryLogRawAllocation::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MemoryLogRawAllocation>(arena);
}

void MemoryLogRawAllocation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryLogRawAllocation)
  operation_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  allocator_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&step_id_, 0, reinterpret_cast<char*>(&allocation_id_) -
    reinterpret_cast<char*>(&step_id_) + sizeof(allocation_id_));
}

bool MemoryLogRawAllocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemoryLogRawAllocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string operation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->operation().data(), this->operation().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.MemoryLogRawAllocation.operation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ptr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ptr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 allocation_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &allocation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string allocator_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allocator_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->allocator_name().data(), this->allocator_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.MemoryLogRawAllocation.allocator_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemoryLogRawAllocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemoryLogRawAllocation)
  return false;
#undef DO_
}

void MemoryLogRawAllocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemoryLogRawAllocation)
  // int64 step_id = 1;
  if (this->step_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // string operation = 2;
  if (this->operation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogRawAllocation.operation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->operation(), output);
  }

  // int64 num_bytes = 3;
  if (this->num_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->num_bytes(), output);
  }

  // uint64 ptr = 4;
  if (this->ptr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ptr(), output);
  }

  // int64 allocation_id = 5;
  if (this->allocation_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->allocation_id(), output);
  }

  // string allocator_name = 6;
  if (this->allocator_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), this->allocator_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogRawAllocation.allocator_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->allocator_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.MemoryLogRawAllocation)
}

::google::protobuf::uint8* MemoryLogRawAllocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryLogRawAllocation)
  // int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // string operation = 2;
  if (this->operation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogRawAllocation.operation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->operation(), target);
  }

  // int64 num_bytes = 3;
  if (this->num_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->num_bytes(), target);
  }

  // uint64 ptr = 4;
  if (this->ptr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ptr(), target);
  }

  // int64 allocation_id = 5;
  if (this->allocation_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->allocation_id(), target);
  }

  // string allocator_name = 6;
  if (this->allocator_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), this->allocator_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogRawAllocation.allocator_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->allocator_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryLogRawAllocation)
  return target;
}

size_t MemoryLogRawAllocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryLogRawAllocation)
  size_t total_size = 0;

  // string operation = 2;
  if (this->operation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operation());
  }

  // string allocator_name = 6;
  if (this->allocator_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->allocator_name());
  }

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  // int64 num_bytes = 3;
  if (this->num_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_bytes());
  }

  // uint64 ptr = 4;
  if (this->ptr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ptr());
  }

  // int64 allocation_id = 5;
  if (this->allocation_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->allocation_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryLogRawAllocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryLogRawAllocation)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryLogRawAllocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryLogRawAllocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryLogRawAllocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryLogRawAllocation)
    MergeFrom(*source);
  }
}

void MemoryLogRawAllocation::MergeFrom(const MemoryLogRawAllocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryLogRawAllocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.operation().size() > 0) {
    set_operation(from.operation());
  }
  if (from.allocator_name().size() > 0) {
    set_allocator_name(from.allocator_name());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
  if (from.num_bytes() != 0) {
    set_num_bytes(from.num_bytes());
  }
  if (from.ptr() != 0) {
    set_ptr(from.ptr());
  }
  if (from.allocation_id() != 0) {
    set_allocation_id(from.allocation_id());
  }
}

void MemoryLogRawAllocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryLogRawAllocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryLogRawAllocation::CopyFrom(const MemoryLogRawAllocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryLogRawAllocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLogRawAllocation::IsInitialized() const {
  return true;
}

void MemoryLogRawAllocation::Swap(MemoryLogRawAllocation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MemoryLogRawAllocation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MemoryLogRawAllocation::UnsafeArenaSwap(MemoryLogRawAllocation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MemoryLogRawAllocation::InternalSwap(MemoryLogRawAllocation* other) {
  operation_.Swap(&other->operation_);
  allocator_name_.Swap(&other->allocator_name_);
  std::swap(step_id_, other->step_id_);
  std::swap(num_bytes_, other->num_bytes_);
  std::swap(ptr_, other->ptr_);
  std::swap(allocation_id_, other->allocation_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryLogRawAllocation::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryLogRawAllocation

// int64 step_id = 1;
void MemoryLogRawAllocation::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MemoryLogRawAllocation::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawAllocation.step_id)
  return step_id_;
}
void MemoryLogRawAllocation::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawAllocation.step_id)
}

// string operation = 2;
void MemoryLogRawAllocation::clear_operation() {
  operation_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MemoryLogRawAllocation::operation() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawAllocation.operation)
  return operation_.Get();
}
void MemoryLogRawAllocation::set_operation(const ::std::string& value) {
  
  operation_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawAllocation.operation)
}
void MemoryLogRawAllocation::set_operation(const char* value) {
  
  operation_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MemoryLogRawAllocation.operation)
}
void MemoryLogRawAllocation::set_operation(const char* value,
    size_t size) {
  
  operation_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemoryLogRawAllocation.operation)
}
::std::string* MemoryLogRawAllocation::mutable_operation() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogRawAllocation.operation)
  return operation_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MemoryLogRawAllocation::release_operation() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogRawAllocation.operation)
  
  return operation_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MemoryLogRawAllocation::unsafe_arena_release_operation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogRawAllocation.operation)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return operation_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MemoryLogRawAllocation::set_allocated_operation(::std::string* operation) {
  if (operation != NULL) {
    
  } else {
    
  }
  operation_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogRawAllocation.operation)
}
void MemoryLogRawAllocation::unsafe_arena_set_allocated_operation(
    ::std::string* operation) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (operation != NULL) {
    
  } else {
    
  }
  operation_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      operation, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogRawAllocation.operation)
}

// int64 num_bytes = 3;
void MemoryLogRawAllocation::clear_num_bytes() {
  num_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MemoryLogRawAllocation::num_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawAllocation.num_bytes)
  return num_bytes_;
}
void MemoryLogRawAllocation::set_num_bytes(::google::protobuf::int64 value) {
  
  num_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawAllocation.num_bytes)
}

// uint64 ptr = 4;
void MemoryLogRawAllocation::clear_ptr() {
  ptr_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MemoryLogRawAllocation::ptr() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawAllocation.ptr)
  return ptr_;
}
void MemoryLogRawAllocation::set_ptr(::google::protobuf::uint64 value) {
  
  ptr_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawAllocation.ptr)
}

// int64 allocation_id = 5;
void MemoryLogRawAllocation::clear_allocation_id() {
  allocation_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MemoryLogRawAllocation::allocation_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawAllocation.allocation_id)
  return allocation_id_;
}
void MemoryLogRawAllocation::set_allocation_id(::google::protobuf::int64 value) {
  
  allocation_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawAllocation.allocation_id)
}

// string allocator_name = 6;
void MemoryLogRawAllocation::clear_allocator_name() {
  allocator_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MemoryLogRawAllocation::allocator_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawAllocation.allocator_name)
  return allocator_name_.Get();
}
void MemoryLogRawAllocation::set_allocator_name(const ::std::string& value) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawAllocation.allocator_name)
}
void MemoryLogRawAllocation::set_allocator_name(const char* value) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MemoryLogRawAllocation.allocator_name)
}
void MemoryLogRawAllocation::set_allocator_name(const char* value,
    size_t size) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemoryLogRawAllocation.allocator_name)
}
::std::string* MemoryLogRawAllocation::mutable_allocator_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogRawAllocation.allocator_name)
  return allocator_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MemoryLogRawAllocation::release_allocator_name() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogRawAllocation.allocator_name)
  
  return allocator_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MemoryLogRawAllocation::unsafe_arena_release_allocator_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogRawAllocation.allocator_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return allocator_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MemoryLogRawAllocation::set_allocated_allocator_name(::std::string* allocator_name) {
  if (allocator_name != NULL) {
    
  } else {
    
  }
  allocator_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allocator_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogRawAllocation.allocator_name)
}
void MemoryLogRawAllocation::unsafe_arena_set_allocated_allocator_name(
    ::std::string* allocator_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (allocator_name != NULL) {
    
  } else {
    
  }
  allocator_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      allocator_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogRawAllocation.allocator_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLogRawDeallocation::kStepIdFieldNumber;
const int MemoryLogRawDeallocation::kOperationFieldNumber;
const int MemoryLogRawDeallocation::kAllocationIdFieldNumber;
const int MemoryLogRawDeallocation::kAllocatorNameFieldNumber;
const int MemoryLogRawDeallocation::kDeferredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLogRawDeallocation::MemoryLogRawDeallocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemoryLogRawDeallocation)
}
MemoryLogRawDeallocation::MemoryLogRawDeallocation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryLogRawDeallocation)
}
MemoryLogRawDeallocation::MemoryLogRawDeallocation(const MemoryLogRawDeallocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.operation().size() > 0) {
    operation_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation(),
      GetArenaNoVirtual());
  }
  allocator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.allocator_name().size() > 0) {
    allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.allocator_name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&step_id_, &from.step_id_,
    reinterpret_cast<char*>(&deferred_) -
    reinterpret_cast<char*>(&step_id_) + sizeof(deferred_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryLogRawDeallocation)
}

void MemoryLogRawDeallocation::SharedCtor() {
  operation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allocator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&step_id_, 0, reinterpret_cast<char*>(&deferred_) -
    reinterpret_cast<char*>(&step_id_) + sizeof(deferred_));
  _cached_size_ = 0;
}

MemoryLogRawDeallocation::~MemoryLogRawDeallocation() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryLogRawDeallocation)
  SharedDtor();
}

void MemoryLogRawDeallocation::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  operation_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  allocator_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void MemoryLogRawDeallocation::ArenaDtor(void* object) {
  MemoryLogRawDeallocation* _this = reinterpret_cast< MemoryLogRawDeallocation* >(object);
  (void)_this;
}
void MemoryLogRawDeallocation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MemoryLogRawDeallocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryLogRawDeallocation::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::file_level_metadata[5].descriptor;
}

const MemoryLogRawDeallocation& MemoryLogRawDeallocation::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemoryLogRawDeallocation* MemoryLogRawDeallocation::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MemoryLogRawDeallocation>(arena);
}

void MemoryLogRawDeallocation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryLogRawDeallocation)
  operation_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  allocator_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&step_id_, 0, reinterpret_cast<char*>(&deferred_) -
    reinterpret_cast<char*>(&step_id_) + sizeof(deferred_));
}

bool MemoryLogRawDeallocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemoryLogRawDeallocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string operation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->operation().data(), this->operation().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.MemoryLogRawDeallocation.operation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 allocation_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &allocation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string allocator_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allocator_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->allocator_name().data(), this->allocator_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.MemoryLogRawDeallocation.allocator_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool deferred = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deferred_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemoryLogRawDeallocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemoryLogRawDeallocation)
  return false;
#undef DO_
}

void MemoryLogRawDeallocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemoryLogRawDeallocation)
  // int64 step_id = 1;
  if (this->step_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // string operation = 2;
  if (this->operation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogRawDeallocation.operation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->operation(), output);
  }

  // int64 allocation_id = 3;
  if (this->allocation_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->allocation_id(), output);
  }

  // string allocator_name = 4;
  if (this->allocator_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), this->allocator_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogRawDeallocation.allocator_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->allocator_name(), output);
  }

  // bool deferred = 5;
  if (this->deferred() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->deferred(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.MemoryLogRawDeallocation)
}

::google::protobuf::uint8* MemoryLogRawDeallocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryLogRawDeallocation)
  // int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // string operation = 2;
  if (this->operation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogRawDeallocation.operation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->operation(), target);
  }

  // int64 allocation_id = 3;
  if (this->allocation_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->allocation_id(), target);
  }

  // string allocator_name = 4;
  if (this->allocator_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), this->allocator_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogRawDeallocation.allocator_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->allocator_name(), target);
  }

  // bool deferred = 5;
  if (this->deferred() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->deferred(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryLogRawDeallocation)
  return target;
}

size_t MemoryLogRawDeallocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryLogRawDeallocation)
  size_t total_size = 0;

  // string operation = 2;
  if (this->operation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operation());
  }

  // string allocator_name = 4;
  if (this->allocator_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->allocator_name());
  }

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  // int64 allocation_id = 3;
  if (this->allocation_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->allocation_id());
  }

  // bool deferred = 5;
  if (this->deferred() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryLogRawDeallocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryLogRawDeallocation)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryLogRawDeallocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryLogRawDeallocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryLogRawDeallocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryLogRawDeallocation)
    MergeFrom(*source);
  }
}

void MemoryLogRawDeallocation::MergeFrom(const MemoryLogRawDeallocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryLogRawDeallocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.operation().size() > 0) {
    set_operation(from.operation());
  }
  if (from.allocator_name().size() > 0) {
    set_allocator_name(from.allocator_name());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
  if (from.allocation_id() != 0) {
    set_allocation_id(from.allocation_id());
  }
  if (from.deferred() != 0) {
    set_deferred(from.deferred());
  }
}

void MemoryLogRawDeallocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryLogRawDeallocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryLogRawDeallocation::CopyFrom(const MemoryLogRawDeallocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryLogRawDeallocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLogRawDeallocation::IsInitialized() const {
  return true;
}

void MemoryLogRawDeallocation::Swap(MemoryLogRawDeallocation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MemoryLogRawDeallocation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MemoryLogRawDeallocation::UnsafeArenaSwap(MemoryLogRawDeallocation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MemoryLogRawDeallocation::InternalSwap(MemoryLogRawDeallocation* other) {
  operation_.Swap(&other->operation_);
  allocator_name_.Swap(&other->allocator_name_);
  std::swap(step_id_, other->step_id_);
  std::swap(allocation_id_, other->allocation_id_);
  std::swap(deferred_, other->deferred_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryLogRawDeallocation::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryLogRawDeallocation

// int64 step_id = 1;
void MemoryLogRawDeallocation::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MemoryLogRawDeallocation::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawDeallocation.step_id)
  return step_id_;
}
void MemoryLogRawDeallocation::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawDeallocation.step_id)
}

// string operation = 2;
void MemoryLogRawDeallocation::clear_operation() {
  operation_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MemoryLogRawDeallocation::operation() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawDeallocation.operation)
  return operation_.Get();
}
void MemoryLogRawDeallocation::set_operation(const ::std::string& value) {
  
  operation_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawDeallocation.operation)
}
void MemoryLogRawDeallocation::set_operation(const char* value) {
  
  operation_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MemoryLogRawDeallocation.operation)
}
void MemoryLogRawDeallocation::set_operation(const char* value,
    size_t size) {
  
  operation_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemoryLogRawDeallocation.operation)
}
::std::string* MemoryLogRawDeallocation::mutable_operation() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogRawDeallocation.operation)
  return operation_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MemoryLogRawDeallocation::release_operation() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogRawDeallocation.operation)
  
  return operation_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MemoryLogRawDeallocation::unsafe_arena_release_operation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogRawDeallocation.operation)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return operation_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MemoryLogRawDeallocation::set_allocated_operation(::std::string* operation) {
  if (operation != NULL) {
    
  } else {
    
  }
  operation_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogRawDeallocation.operation)
}
void MemoryLogRawDeallocation::unsafe_arena_set_allocated_operation(
    ::std::string* operation) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (operation != NULL) {
    
  } else {
    
  }
  operation_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      operation, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogRawDeallocation.operation)
}

// int64 allocation_id = 3;
void MemoryLogRawDeallocation::clear_allocation_id() {
  allocation_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MemoryLogRawDeallocation::allocation_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawDeallocation.allocation_id)
  return allocation_id_;
}
void MemoryLogRawDeallocation::set_allocation_id(::google::protobuf::int64 value) {
  
  allocation_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawDeallocation.allocation_id)
}

// string allocator_name = 4;
void MemoryLogRawDeallocation::clear_allocator_name() {
  allocator_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MemoryLogRawDeallocation::allocator_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawDeallocation.allocator_name)
  return allocator_name_.Get();
}
void MemoryLogRawDeallocation::set_allocator_name(const ::std::string& value) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawDeallocation.allocator_name)
}
void MemoryLogRawDeallocation::set_allocator_name(const char* value) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MemoryLogRawDeallocation.allocator_name)
}
void MemoryLogRawDeallocation::set_allocator_name(const char* value,
    size_t size) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemoryLogRawDeallocation.allocator_name)
}
::std::string* MemoryLogRawDeallocation::mutable_allocator_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogRawDeallocation.allocator_name)
  return allocator_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MemoryLogRawDeallocation::release_allocator_name() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogRawDeallocation.allocator_name)
  
  return allocator_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MemoryLogRawDeallocation::unsafe_arena_release_allocator_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogRawDeallocation.allocator_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return allocator_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MemoryLogRawDeallocation::set_allocated_allocator_name(::std::string* allocator_name) {
  if (allocator_name != NULL) {
    
  } else {
    
  }
  allocator_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allocator_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogRawDeallocation.allocator_name)
}
void MemoryLogRawDeallocation::unsafe_arena_set_allocated_allocator_name(
    ::std::string* allocator_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (allocator_name != NULL) {
    
  } else {
    
  }
  allocator_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      allocator_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogRawDeallocation.allocator_name)
}

// bool deferred = 5;
void MemoryLogRawDeallocation::clear_deferred() {
  deferred_ = false;
}
bool MemoryLogRawDeallocation::deferred() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawDeallocation.deferred)
  return deferred_;
}
void MemoryLogRawDeallocation::set_deferred(bool value) {
  
  deferred_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawDeallocation.deferred)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
